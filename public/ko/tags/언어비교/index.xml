<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>언어비교 on sixmen.com</title>
    <link>http://sixmen.com/ko/tags/%EC%96%B8%EC%96%B4%EB%B9%84%EA%B5%90/</link>
    <description>Recent content in 언어비교 on sixmen.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 04 Jan 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://sixmen.com/ko/tags/%EC%96%B8%EC%96%B4%EB%B9%84%EA%B5%90/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>언어 비교 - 현재 유닉스 시간</title>
      <link>http://sixmen.com/ko/tech/2017-01-04-1-language-comparison-date-current-unix-time/</link>
      <pubDate>Wed, 04 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-01-04-1-language-comparison-date-current-unix-time/</guid>
      <description>유닉스 시간은 유닉스 Epoch(1970-01-01 00:00:00 +0000 (UTC))로 부터 지난 초 단위 시간을 말합니다. C time_t&amp;nbsp;now&amp;nbsp;=&amp;nbsp;time(NULL); #include &amp;lt;time.h&amp;gt; C++ time_t&amp;nbsp;now&amp;nbsp;=&amp;nbsp;time(nullptr); #include &amp;lt;ctime&amp;gt; CoffeeScript now&amp;nbsp;=&amp;nbsp;Date.now()&amp;nbsp;/&amp;nbsp;1000 now&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date().getTime()&amp;nbsp;/&amp;nbsp;1000 Java long&amp;nbsp;now&amp;nbsp;=&amp;nbsp;System.currentTimeMillis()&amp;nbsp;/&amp;nbsp;1000; long&amp;nbsp;now&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date().getTime()&amp;nbsp;/&amp;nbsp;1000; import java.util.Date; JavaScript now&amp;nbsp;=&amp;nbsp;Date.now()&amp;nbsp;/&amp;nbsp;1000; now&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date().getTime()&amp;nbsp;/&amp;nbsp;1000; Kotlin val&amp;nbsp;now&amp;nbsp;=&amp;nbsp;System.currentTimeMillis()&amp;nbsp;/&amp;nbsp;1000 val&amp;nbsp;now&amp;nbsp;=&amp;nbsp;Date().getTime()/1000 import java.util.Date Lua now&amp;nbsp;=&amp;nbsp;os.time() Objective-C NSTimeInterval&amp;nbsp;now&amp;nbsp;=&amp;nbsp;[[NSDate&amp;nbsp;date]&amp;nbsp;timeIntervalSince1970]; Perl $now&amp;nbsp;=&amp;nbsp;time; PHP $now&amp;nbsp;=&amp;nbsp;time(); Python time.time() import time</description>
    </item>
    
    <item>
      <title>언어 비교 - 함수 매개 변수에 기본값 지정</title>
      <link>http://sixmen.com/ko/tech/2016-12-19-1-language-comparison-function-default-argument/</link>
      <pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-19-1-language-comparison-function-default-argument/</guid>
      <description>C 해당 기능이 존재하지 않음 C++ double&amp;nbsp;logarithm(double&amp;nbsp;x,&amp;nbsp;double&amp;nbsp;base=10)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;return&amp;nbsp;log(x)&amp;nbsp;/&amp;nbsp;log(base); } CoffeeScript logarithm&amp;nbsp;=&amp;nbsp;(x,&amp;nbsp;base=10)&amp;nbsp;-&amp;gt; &amp;nbsp;&amp;nbsp;Math.log(x)&amp;nbsp;/&amp;nbsp;Math.log(base) Java double&amp;nbsp;logarithm(double&amp;nbsp;x)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;return&amp;nbsp;logarithm(x,&amp;nbsp;10); } double&amp;nbsp;logarithm(double&amp;nbsp;x,&amp;nbsp;double&amp;nbsp;base)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;return&amp;nbsp;Math.log(x)&amp;nbsp;/&amp;nbsp;Math.log(base); } use method overloading JavaScript function&amp;nbsp;logarithm(x,&amp;nbsp;base)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;if&amp;nbsp;(base==null)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;base&amp;nbsp;=&amp;nbsp;10; &amp;nbsp;&amp;nbsp;} &amp;nbsp;&amp;nbsp;return&amp;nbsp;Math.log(x)&amp;nbsp;/&amp;nbsp;Math.log(base); } Kotlin fun&amp;nbsp;logarithm(x:&amp;nbsp;Double,&amp;nbsp;base:&amp;nbsp;Double=10.0):&amp;nbsp;Double&amp;nbsp;{ &amp;nbsp;&amp;nbsp;return&amp;nbsp;Math.log(x)&amp;nbsp;/&amp;nbsp;Math.log(base) } Lua function&amp;nbsp;logarithm(x,&amp;nbsp;base) &amp;nbsp;&amp;nbsp;base&amp;nbsp;=&amp;nbsp;base&amp;nbsp;or&amp;nbsp;10 &amp;nbsp;&amp;nbsp;return&amp;nbsp;math.log(x)&amp;nbsp;/&amp;nbsp;math.log(base) end} Objective-C 해당 기능이 존재하지 않음 Perl sub&amp;nbsp;logarithm&amp;nbsp;{ &amp;nbsp;&amp;nbsp;my&amp;nbsp;$x&amp;nbsp;=&amp;nbsp;shift; &amp;nbsp;&amp;nbsp;my&amp;nbsp;$base&amp;nbsp;=&amp;nbsp;shift&amp;nbsp;//&amp;nbsp;10; &amp;nbsp;&amp;nbsp;log($x)&amp;nbsp;/&amp;nbsp;log($base); } PHP function&amp;nbsp;logarithm($x,&amp;nbsp;$base=10)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;return&amp;nbsp;log($x)&amp;nbsp;/&amp;nbsp;log($base); } Python def&amp;nbsp;logarithm(x,&amp;nbsp;base=10): &amp;nbsp;&amp;nbsp;return&amp;nbsp;math.log(x)&amp;nbsp;/&amp;nbsp;math.log(base)</description>
    </item>
    
    <item>
      <title>언어 비교 - 정규식 캡쳐링 그룹</title>
      <link>http://sixmen.com/ko/tech/2016-12-14-1-language-comparison-regular-expression-capturing-group/</link>
      <pubDate>Wed, 14 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-14-1-language-comparison-regular-expression-capturing-group/</guid>
      <description>C const&amp;nbsp;char&amp;nbsp;*str&amp;nbsp;=&amp;nbsp;&#34;2016-12-05&#34;; regex_t&amp;nbsp;rx; if&amp;nbsp;(regcomp(&amp;amp;rx,&amp;nbsp;&#34;([[:digit:]]{4})-([[:digit:]]{2})-([[:digit:]]{2})&#34;,&amp;nbsp;REG_EXTENDED)==0)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;regmatch_t&amp;nbsp;m[4]; &amp;nbsp;&amp;nbsp;if&amp;nbsp;(regexec(&amp;amp;rx,&amp;nbsp;str,&amp;nbsp;4,&amp;nbsp;m,&amp;nbsp;0)==0)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;year&amp;nbsp;=&amp;nbsp;str2int(str+m[1].rm_so,&amp;nbsp;m[1].rm_eo&amp;nbsp;-&amp;nbsp;m[1].rm_so); &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;month&amp;nbsp;=&amp;nbsp;str2int(str+m[2].rm_so,&amp;nbsp;m[2].rm_eo&amp;nbsp;-&amp;nbsp;m[2].rm_so); &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;day&amp;nbsp;=&amp;nbsp;str2int(str+m[3].rm_so,&amp;nbsp;m[3].rm_eo&amp;nbsp;-&amp;nbsp;m[3].rm_so); &amp;nbsp;&amp;nbsp;} &amp;nbsp;&amp;nbsp;regfree(&amp;amp;rx); } #include &amp;lt;regex.h&amp;gt; int str2int(const char *str, int len) { int value = 0; char *tmp = strndup(str, len); value = strtol(tmp, (char **)NULL, 10); free(tmp); return value; } C++ string&amp;nbsp;str(&#34;2016-12-05&#34;); regex&amp;nbsp;rx(&#34;(\\d{4})-(\\d{2})-(\\d{2})&#34;); smatch&amp;nbsp;m; if&amp;nbsp;(regex_match(str,&amp;nbsp;m,&amp;nbsp;rx))&amp;nbsp;{ &amp;nbsp;&amp;nbsp;int&amp;nbsp;year&amp;nbsp;=&amp;nbsp;stoi(m.str(1)); &amp;nbsp;&amp;nbsp;int&amp;nbsp;month&amp;nbsp;=&amp;nbsp;stoi(m.str(2)); &amp;nbsp;&amp;nbsp;int&amp;nbsp;day&amp;nbsp;=&amp;nbsp;stoi(m.str(3)); } #include &amp;lt;regex&amp;gt; CoffeeScript str&amp;nbsp;=&amp;nbsp;&#39;2016-12-05&#39; if&amp;nbsp;/(\d{4})-(\d{2})-(\d{2})/.test&amp;nbsp;str &amp;nbsp;&amp;nbsp;year&amp;nbsp;=&amp;nbsp;Number&amp;nbsp;RegExp.$1 &amp;nbsp;&amp;nbsp;month&amp;nbsp;=&amp;nbsp;Number&amp;nbsp;RegExp.$2 &amp;nbsp;&amp;nbsp;day&amp;nbsp;=&amp;nbsp;Number&amp;nbsp;RegExp.$3 Java String&amp;nbsp;str&amp;nbsp;=&amp;nbsp;&#34;2016-12-05&#34;; Pattern&amp;nbsp;rx&amp;nbsp;=&amp;nbsp;Pattern.compile(&#34;(\\d{4})-(\\d{2})-(\\d{2})&#34;); Matcher&amp;nbsp;m&amp;nbsp;=&amp;nbsp;rx.matcher(str); if&amp;nbsp;(m.matches())&amp;nbsp;{ &amp;nbsp;&amp;nbsp;int&amp;nbsp;year&amp;nbsp;=&amp;nbsp;Integer.parseInt(m.group(1)); &amp;nbsp;&amp;nbsp;int&amp;nbsp;month&amp;nbsp;=&amp;nbsp;Integer.parseInt(m.group(2)); &amp;nbsp;&amp;nbsp;int&amp;nbsp;day&amp;nbsp;=&amp;nbsp;Integer.parseInt(m.group(3)); } import java.util.regex.Matcher; import java.util.regex.Pattern;</description>
    </item>
    
    <item>
      <title>언어 비교 - 변수 값 교환</title>
      <link>http://sixmen.com/ko/tech/2016-12-12-1-language-comparison-variable-swap/</link>
      <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-12-1-language-comparison-variable-swap/</guid>
      <description>C //&amp;nbsp;basic tmp&amp;nbsp;=&amp;nbsp;x; x&amp;nbsp;=&amp;nbsp;y; y&amp;nbsp;=&amp;nbsp;tmp; //&amp;nbsp;function void&amp;nbsp;swap(int&amp;nbsp;*a,&amp;nbsp;int&amp;nbsp;*b)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;int&amp;nbsp;tmp; &amp;nbsp;&amp;nbsp;tmp&amp;nbsp;=&amp;nbsp;*b; &amp;nbsp;&amp;nbsp;*b&amp;nbsp;=&amp;nbsp;*a; &amp;nbsp;&amp;nbsp;*a&amp;nbsp;=&amp;nbsp;tmp; } swap(&amp;amp;x,&amp;nbsp;&amp;amp;y); //&amp;nbsp;no&amp;nbsp;temporary&amp;nbsp;variable x&amp;nbsp;=&amp;nbsp;x&amp;nbsp;+&amp;nbsp;y; y&amp;nbsp;=&amp;nbsp;x&amp;nbsp;-&amp;nbsp;y; x&amp;nbsp;=&amp;nbsp;x&amp;nbsp;-&amp;nbsp;y; //&amp;nbsp;no&amp;nbsp;temporary&amp;nbsp;variable&amp;nbsp;2 x&amp;nbsp;=&amp;nbsp;x&amp;nbsp;^&amp;nbsp;y; y&amp;nbsp;=&amp;nbsp;x&amp;nbsp;^&amp;nbsp;y; x&amp;nbsp;=&amp;nbsp;x&amp;nbsp;^&amp;nbsp;y; C++ swap(x,&amp;nbsp;y); #include &amp;lt;algorithm&amp;gt; CoffeeScript [x,&amp;nbsp;y]&amp;nbsp;=&amp;nbsp;[y,&amp;nbsp;x] Java tmp&amp;nbsp;=&amp;nbsp;x; x&amp;nbsp;=&amp;nbsp;y; y&amp;nbsp;=&amp;nbsp;tmp; JavaScript //&amp;nbsp;basic tmp&amp;nbsp;=&amp;nbsp;x; x&amp;nbsp;=&amp;nbsp;y; y&amp;nbsp;=&amp;nbsp;tmp; //&amp;nbsp;tricky&amp;nbsp;one-line x&amp;nbsp;=&amp;nbsp;[y,&amp;nbsp;y&amp;nbsp;=&amp;nbsp;x][0]; //&amp;nbsp;ES2015&amp;nbsp;(ES6) [x,&amp;nbsp;y]&amp;nbsp;=&amp;nbsp;[y,&amp;nbsp;x] Kotlin tmp&amp;nbsp;=&amp;nbsp;x x&amp;nbsp;=&amp;nbsp;y y&amp;nbsp;=&amp;nbsp;tmp Lua x,&amp;nbsp;y&amp;nbsp;=&amp;nbsp;y,&amp;nbsp;x Objective-C tmp&amp;nbsp;=&amp;nbsp;x; x&amp;nbsp;=&amp;nbsp;y; y&amp;nbsp;=&amp;nbsp;tmp; Perl ($x,&amp;nbsp;$y)&amp;nbsp;=&amp;nbsp;($y,&amp;nbsp;$x); PHP //&amp;nbsp;basic list($x,&amp;nbsp;$y)&amp;nbsp;=&amp;nbsp;array($y,&amp;nbsp;$x); //&amp;nbsp;function function&amp;nbsp;swap(&amp;amp;$x,&amp;nbsp;&amp;amp;$y)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;$tmp&amp;nbsp;=&amp;nbsp;$x; &amp;nbsp;&amp;nbsp;$x&amp;nbsp;=&amp;nbsp;$y; &amp;nbsp;&amp;nbsp;$y&amp;nbsp;=&amp;nbsp;$tmp; } Python x,&amp;nbsp;y&amp;nbsp;=&amp;nbsp;y,&amp;nbsp;x Ruby x,&amp;nbsp;y&amp;nbsp;=&amp;nbsp;y,&amp;nbsp;x Swift swap(&amp;amp;x,&amp;nbsp;&amp;amp;y)</description>
    </item>
    
    <item>
      <title>언어 비교 - 문자열 배열 합치기</title>
      <link>http://sixmen.com/ko/tech/2016-12-09-1-language-comparison-string-join/</link>
      <pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-09-1-language-comparison-string-join/</guid>
      <description>C const&amp;nbsp;char&amp;nbsp;*const&amp;nbsp;strs[]&amp;nbsp;=&amp;nbsp;{&#34;one&#34;,&amp;nbsp;&#34;two&#34;,&amp;nbsp;&#34;three&#34;}; int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0; int&amp;nbsp;size&amp;nbsp;=&amp;nbsp;0; char&amp;nbsp;*out; for&amp;nbsp;(i=0;i&amp;lt;3;i++)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;size&amp;nbsp;+=&amp;nbsp;strlen(strs[i])&amp;nbsp;+&amp;nbsp;1; } out&amp;nbsp;=&amp;nbsp;(char&amp;nbsp;*)malloc(size); strcpy(out,&amp;nbsp;strs[0]); for&amp;nbsp;(i=1;i&amp;lt;3;i++)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;strcat(out,&amp;nbsp;&#34;,&#34;); &amp;nbsp;&amp;nbsp;strcat(out,&amp;nbsp;strs[i]); } C++ //&amp;nbsp;one-liner vector&amp;lt;string&amp;gt;&amp;nbsp;strs&amp;nbsp;=&amp;nbsp;{&#34;one&#34;,&amp;nbsp;&#34;two&#34;,&amp;nbsp;&#34;three&#34;}; string&amp;nbsp;out&amp;nbsp;=&amp;nbsp;accumulate(next(strs.begin()),&amp;nbsp;strs.end(),&amp;nbsp;strs[0], &amp;nbsp;&amp;nbsp;[](const&amp;nbsp;string&amp;nbsp;&amp;amp;a,&amp;nbsp;const&amp;nbsp;string&amp;nbsp;&amp;amp;b)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;a&amp;nbsp;+&amp;nbsp;&#34;,&#34;&amp;nbsp;+&amp;nbsp;b; &amp;nbsp;&amp;nbsp;}); //&amp;nbsp;prevent&amp;nbsp;reallocation vector&amp;lt;string&amp;gt;&amp;nbsp;strs&amp;nbsp;=&amp;nbsp;{&#34;one&#34;,&amp;nbsp;&#34;two&#34;,&amp;nbsp;&#34;three&#34;}; ostringstream&amp;nbsp;os; copy(strs.begin(),&amp;nbsp;strs.end()-1,&amp;nbsp;ostream_iterator&amp;lt;string&amp;gt;(os,&amp;nbsp;&#34;,&#34;)); os&amp;nbsp;&amp;lt;&amp;lt;&amp;nbsp;*strs.rbegin(); string&amp;nbsp;out&amp;nbsp;=&amp;nbsp;os.str(); #include &amp;lt;algorithm&amp;gt; // copy #include &amp;lt;iterator&amp;gt; // next, ostream_iterator #include &amp;lt;numeric&amp;gt; // accumulate #include &amp;lt;sstream&amp;gt; // ostringstream CoffeeScript strs&amp;nbsp;=&amp;nbsp;[&#39;one&#39;,&#39;two&#39;,&#39;three&#39;] out&amp;nbsp;=&amp;nbsp;strs.join&amp;nbsp;&#39;,&#39; Java //&amp;nbsp;Java&amp;nbsp;8 List&amp;lt;String&amp;gt;&amp;nbsp;strs&amp;nbsp;=&amp;nbsp;Arrays.asList(&#34;one&#34;,&amp;nbsp;&#34;two&#34;,&amp;nbsp;&#34;three&#34;); String&amp;nbsp;out&amp;nbsp;=&amp;nbsp;String.join(&#34;,&#34;,&amp;nbsp;strs); //&amp;nbsp;Java&amp;nbsp;7&amp;nbsp;and&amp;nbsp;below String[]&amp;nbsp;strs&amp;nbsp;=&amp;nbsp;{&#34;one&#34;,&amp;nbsp;&#34;two&#34;,&amp;nbsp;&#34;three&#34;}; StringBuilder&amp;nbsp;sb&amp;nbsp;=&amp;nbsp;new&amp;nbsp;StringBuilder(); boolean&amp;nbsp;first&amp;nbsp;=&amp;nbsp;true; for&amp;nbsp;(String&amp;nbsp;str&amp;nbsp;:&amp;nbsp;strs)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;if&amp;nbsp;(first)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;first&amp;nbsp;=&amp;nbsp;false; &amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sb.append(&#34;,&#34;); &amp;nbsp;&amp;nbsp;} &amp;nbsp;&amp;nbsp;sb.append(str); } String&amp;nbsp;out&amp;nbsp;=&amp;nbsp;sb.toString(); JavaScript let&amp;nbsp;strs&amp;nbsp;=&amp;nbsp;[&#39;one&#39;,&#39;two&#39;,&#39;three&#39;] let&amp;nbsp;out&amp;nbsp;=&amp;nbsp;strs.join(&#39;,&#39;) Kotlin val&amp;nbsp;strs&amp;nbsp;=&amp;nbsp;arrayOf(&#34;one&#34;,&amp;nbsp;&#34;two&#34;,&amp;nbsp;&#34;three&#34;) val&amp;nbsp;out&amp;nbsp;=&amp;nbsp;strs.joinToString(&#34;,&#34;)</description>
    </item>
    
    <item>
      <title>언어 비교 - 문자열 연결</title>
      <link>http://sixmen.com/ko/tech/2016-12-07-1-language-comparison-string-concatenate/</link>
      <pubDate>Wed, 07 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-07-1-language-comparison-string-concatenate/</guid>
      <description>C const&amp;nbsp;char&amp;nbsp;*s1&amp;nbsp;=&amp;nbsp;&#34;hello&#34;; const&amp;nbsp;char&amp;nbsp;*s2&amp;nbsp;=&amp;nbsp;&#34;&amp;nbsp;world&#34;; char&amp;nbsp;*s3&amp;nbsp;=&amp;nbsp;(char&amp;nbsp;*)malloc(strlen(s1)+strlen(s2)+1); strcpy(s3,&amp;nbsp;s1); strcat(s3,&amp;nbsp;s2); C++ //&amp;nbsp;destructive string&amp;nbsp;s1&amp;nbsp;=&amp;nbsp;&#34;hello&#34;; s1&amp;nbsp;+=&amp;nbsp;&#34;&amp;nbsp;world&#34;; //&amp;nbsp;non-destructive string&amp;nbsp;s1&amp;nbsp;=&amp;nbsp;&#34;hello&#34;; string&amp;nbsp;s2&amp;nbsp;=&amp;nbsp;s1&amp;nbsp;+&amp;nbsp;&#34;&amp;nbsp;world&#34;; CoffeeScript &#39;hello&#39;&amp;nbsp;+&amp;nbsp;&#39;&amp;nbsp;world&#39; Java &#34;hello&#34;&amp;nbsp;+&amp;nbsp;&#34;&amp;nbsp;world&#34; JavaScript &#39;hello&#39;&amp;nbsp;+&amp;nbsp;&#39;&amp;nbsp;world&#39; Kotlin &#34;hello&#34;&amp;nbsp;+&amp;nbsp;&#34;&amp;nbsp;world&#34; Lua &#39;hello&#39;&amp;nbsp;..&amp;nbsp;&#39;&amp;nbsp;world&#39; Objective-C //&amp;nbsp;destructive NSMutableString&amp;nbsp;*s1&amp;nbsp;=&amp;nbsp;[@&#34;hello&#34;&amp;nbsp;mutableCopy]; [s1&amp;nbsp;appendString:@&#34;&amp;nbsp;world&#34;]; //&amp;nbsp;non-destructive NSString&amp;nbsp;*s1&amp;nbsp;=&amp;nbsp;@&#34;hello&#34;; NSString&amp;nbsp;*s2&amp;nbsp;=&amp;nbsp;[s1&amp;nbsp;stringByAppendingString:@&#34;&amp;nbsp;world&#34;]; Perl &#39;hello&#39;&amp;nbsp;.&amp;nbsp;&#39;&amp;nbsp;world&#39; PHP &#39;hello&#39;&amp;nbsp;.&amp;nbsp;&#39;&amp;nbsp;world&#39; Python &#39;hello&#39;&amp;nbsp;+&amp;nbsp;&#39;&amp;nbsp;world&#39; Ruby &#39;hello&#39;&amp;nbsp;+&amp;nbsp;&#39;&amp;nbsp;world&#39; Swift &#34;hello&#34;&amp;nbsp;+&amp;nbsp;&#34;&amp;nbsp;world&#34;</description>
    </item>
    
  </channel>
</rss>