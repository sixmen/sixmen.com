<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>sixmen.com</title>
    <link>http://sixmen.com/ko/index.xml</link>
    <description>Recent content on sixmen.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 08 Feb 2017 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://sixmen.com/ko/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>크로키가 Node.js를 선택한 이유</title>
      <link>http://sixmen.com/ko/tech/2017-02-08-1-why-croquis-selects-nodejs/</link>
      <pubDate>Wed, 08 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-02-08-1-why-croquis-selects-nodejs/</guid>
      <description>&lt;p&gt;현재 크로키에서는 서버용 웹 프레임워크로 &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; 위에서
&lt;a href=&#34;http://expressjs.com/&#34;&gt;Express&lt;/a&gt;를 사용하고 있습니다.&lt;/p&gt;

&lt;p&gt;이번 글에서는 어떤 이유로 Node.js를 사용하게 되었는지 설명하려고 합니다.
여러분들이 웹 프레임워크를 선택하시는 데 참고가 되었으면 합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;크로크닷컴을 설립한 것은 2012년 2월입니다.
회사를 차리면서 구상했던 것은 SNS 성격을 가진 서비스로 당연히 서버가 필요했습니다.
서버 프로그래밍은 2004년 무렵 Tomcat을 잠깐 써본 것이 전부였기 때문에
어떤 언어/프레임워크를 써야 하는지부터가 고민의 시작이었습니다.&lt;/p&gt;

&lt;p&gt;몇 가지 후보군이 있었던 것으로 기억합니다.&lt;/p&gt;

&lt;p&gt;첫 번째는 국내 웹에서 이미 많이 사용하고 있던 PHP입니다.&lt;/p&gt;

&lt;p&gt;두 번째는 국내에서 또 많이 사용하는 ASP입니다.&lt;/p&gt;

&lt;p&gt;세 번째는 대형 서비스에서 많이 사용하는 스프링입니다.
지금도 이력서를 받아보면 스프링을 사용/공부했다는 사람들이 종종 보입니다.&lt;/p&gt;

&lt;p&gt;네 번째는 &lt;a href=&#34;http://rubyonrails.org/&#34;&gt;루비 온 레일즈&lt;/a&gt;입니다.&lt;/p&gt;

&lt;p&gt;마지막이 &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;입니다.
회사 설립 당시에 버전이 0.6이었는데, 국내에 책도 나오면서
이곳저곳에서 화제가 되었기에 살펴보았습니다.&lt;/p&gt;

&lt;p&gt;그 외에 &lt;a href=&#34;https://www.djangoproject.com/&#34;&gt;장고&lt;/a&gt;도 스타트업에서 많이 쓰이고
이력서에 장고를 사용했다는 사람이 심심치 않게 보이는데, 2012년 당시에
보면서도 그냥 지나쳤던 건지 널리 쓰이지 않았던 것인지 정확히 기억나지는 않지만,
후보로 고려하지 않았던 것 같습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;PHP는 언어로서 완성도가 떨어진다고 생각하고 있었기에 배제를 했습니다.
또한, 서버로는 당연히 리눅스를 생각했기에 ASP도 바로 배제되었습니다.&lt;/p&gt;

&lt;p&gt;스프링은 조금 고민이 되었지만, Tomcat을 통한 경험이 좋지 않아서
컴파일해서 배포해야 하는 프레임워크를 후보에서 제외했습니다.
(Tomcat과 스프링이 뭐가 다른 건지 잘 모르고,
10년 동안 많이 발전했을 수도 있지만, 워낙 거부감이 컸습니다.)&lt;/p&gt;

&lt;p&gt;레일즈에 대해서는 지인에게 회의 중에 나온 내용을
바로바로 구현해가면서 확인해봤다는 무용담(?)을 들었던 적이 있고
2007년에 관련 책도 산 적이 있기에 (잘 보지는 않았지만),
일단 후보로 두었습니다.&lt;/p&gt;

&lt;p&gt;Node.js는 당시에 여러 곳에서 빠르다는 이유로 주목받고 있었기에
레일즈와 두개를 주요 후보로 설정했습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;정확히 비교하자만 레일즈=Express 이고, 루비=Node.js 겠죠.
레일즈는 이미 많은 기능이 있었고,
Express는 그에 비하면 단순한 기능만을 지원했습니다.
아마 저희가 웹 서비스를 만들려고 했다면 레일즈를 골랐을 수도 있습니다.
하지만 저희는 앱만 생각하고 있었기에 웹 프로토콜(HTTP) 요청만
처리할 수 있으면 됐습니다.
그리고 반대중적(?) 성격이 조금 있어서 레일즈가 제시하는 대로
프로그램을 만들어야 한다는 것이 썩 맘에 들지는 않았습니다.&lt;/p&gt;

&lt;p&gt;그러나 무엇보다 Node.js를 선택한 결정적인 이유는 이벤트 주도 방식 때문입니다.
대학교에서 공부할 무렵부터 스레드와 락 개념을 별로 좋아하지 않았습니다.
스레드는 컨텐스트 전환에 불필요한 비용이 많이 든다고 생각했고,
데이터를 보호하기 위해서 락이 필요한데 문제 없이 작성하는 것이 어렵다고 봤습니다.
거기에 이벤트 주도 방식으로 단일 스레드에서 동작한다는 것이 제 취향에 맞았습니다.&lt;/p&gt;

&lt;p&gt;Node.js를 선택하는데 당시 얘기가 많던 성능 문제는 크게 고려상황은 아니였습니다.
이벤트 주도 방식때문에 스레드 방식보다는 성능이 잘 나오는게 당연하다는 생각이 있었고,
다른 언어에서도 이벤트 주도 방식을 사용한다면 성능 차이는 그렇게 나지 않을 거라고 봤습니다.
(비슷하게 작성한다면 Java 같은 컴파일 언어가 당연히 성능이 좋을 것이라 생각했습니다.)
실제로 Node.js가 아니더라도 이벤트 주도 방식을 쓰는 Netty난 Twisted 같은 것도 이미 존재했습니다.
Node.js 가 뜬 이후에 나온 Vert.x 같은 것도 있고요.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;그럼에도 불구하고 Node.js를 선택한 것은 JavaScript라는 언어때문입니다.&lt;/p&gt;

&lt;p&gt;프로토타입을 통한 상속이라던지,
this 바인딩등 보편적인 언어들과 다른 특성들 때문에 익히기 어려웠기에
사실 그다지 JavaScript는 좋아하는 언어는 아니였습니다.&lt;/p&gt;

&lt;p&gt;일반적인 언어라면 어떤 것을 사용해서도 모든 일을 할 수 있다고 생각하고 있지만,
언어의 표현력에 따라 난이도는 달라집니다.
그런면에서 JavaScript는 개념이 색다르거나 잘못되어서(변수 스코프같은 경우),
제대로 사용하지 못하고 실수하기 좋은 언어라는 생각이 있었습니다.&lt;/p&gt;

&lt;p&gt;하지만 이벤트 주도 방식에 대해서는 큰 장점이 있었습니다.
태생이 JavaScript는 브라우저 언어였기에 스레드에 대한 개념이 원래 고려되어 있지 않습니다.
(요새는 웹 워커 같은 것이 추가되고 있지만)
따라서 Node.js의 API는 모두 비동기적으로 동작하게 설계가 되어 있습니다.
반면 Java나 Python등의 언어에서는 이벤트 주도 방식으로 처리를 하려면,
원래 사용하던 API를 사용하면 안 되고 Java NIO나 Python asyncio 같은 것을 사용해야 합니다.&lt;/p&gt;

&lt;p&gt;저는 이 차이가 제일 중요하다고 판단했습니다.
이벤트 주도 방식으로 서버를 작성하려면 블로킹 I/O를 사용하면 안 되는데,
언어/플랫폼 적으로 기본이 블로킹 I/O라면 의도치 않게 사용할 확률이 높다고 봤습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;결론적으로 서버에는 이벤트 주도 방식이 가장 좋다고 생각했는데,
언어/플랫폼 태생적으로 이벤트 주도 방식인 Node.js를 사용하는 것이 맞다고 판단했습니다.&lt;/p&gt;

&lt;p&gt;JavaScript의 단점은 CoffeeScript를 사용하는 것으로 회피했습니다.
다만 프로젝트가 커질 수록 형검사에 대한 요구가 커져서 TypeScript로
이전하는 것을 계속 고려중입니다.&lt;/p&gt;

&lt;p&gt;콜백의 어려움은 초반에는 &lt;a href=&#34;https://github.com/caolan/async&#34;&gt;async&lt;/a&gt;로,
현재는 Promise를 사용해서 피하고 있습니다.
TypeScript로 이전한 후에는 async/await를 사용해볼 예정입니다.&lt;/p&gt;

&lt;p&gt;스프링이나 레일즈, 장고등에 비해 구인에 어려움은 조금 있지만,
현재는 Node.js를 선택한 것에 만족하고 있습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Node.js로 유닉스 파이프 처리하기</title>
      <link>http://sixmen.com/ko/tech/2017-01-15-1-process-unix-pipe-with-nodejs/</link>
      <pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-01-15-1-process-unix-pipe-with-nodejs/</guid>
      <description>

&lt;p&gt;크로키에서는 로그를 JSON 문자열로 만들어 일자별(혹은 시간별)로 묶은 후
gzip으로 압축해서 저장하고 있습니다.
그런데 이미 만들어진 로그를 수정해야 하는 일이 생겼습니다.&lt;/p&gt;

&lt;p&gt;예를 들면&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Fri Jan 15 2016 00:00:01 GMT+0000 (UTC)&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;/foobar&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Fri Jan 15 2016 00:00:03 GMT+0000 (UTC)&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;/croquis&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;Fri Jan 15 2016 00:00:10 GMT+0000 (UTC)&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;/awesome&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;였던 데이터를&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;2016-01-15T00:00:01.000Z&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;/foobar&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;2016-01-15T00:00:03.000Z&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;/croquis&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;date&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;2016-01-15T00:00:10.000Z&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;path&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;/awesome&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;처럼 바꿔야 했습니다.&lt;/p&gt;

&lt;p&gt;로그 전체를 읽어와서 줄별로 변환하고 다시 기록하면 되는 일이지만
로그가 커서 잘 동작하지 않았습니다.&lt;/p&gt;

&lt;p&gt;그래서 유닉스의 파이프 형태로 처리하기로 했습니다.&lt;/p&gt;

&lt;p&gt;위의 작업을 하는 Node.js 프로그램은 다음과 같습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;byline&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;byline&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;byline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stdin&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;data&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toISOString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href=&#34;https://github.com/jahewson/node-byline&#34;&gt;byline&lt;/a&gt;은 스트림을 줄별로 처리할 수 있게 해주는 모듈입니다.
줄별로 들어온 JSON 문자열을 파싱하고 원하는 처리를 한 후 다시 쓰기만 하는 단순한 코드입니다.
이 프로그램을 유닉스 파이프라인에 넣으면 원하는 결과를 얻을 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ gunzip -c original/01.data.gz &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; node convert.js &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; gzip &amp;gt; converted/01.data.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;보너스&#34;&gt;보너스&lt;/h3&gt;

&lt;p&gt;이 작업을 순수히 Node.js만 가지고도 할 수 있습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;stream&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;stream&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;zlib&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;zlib&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;byline&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;byline&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Convert&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;stream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Transform&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;constructor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;_transform&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;line&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toISOString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createReadStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;original/01.data.gz&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;zlib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createGunzip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;byline&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Convert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;zlib&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createGzip&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pipe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createWriteStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;converted/01.data.gz&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;하지만 파이프의 특성상 하나의 프로그램이 하나의 작업만
할 수록 응용하기가 편해집니다.
예를 들어 파일이 로컬에 있는게 아니고 S3에 있다면
유닉스 파이프로는 다음과 같이 바꾸면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ aws s3 cp s3://mybucket/stream.txt - &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; gunzip &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; node convert.js &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; gzip &amp;gt; converted/01.data.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;Node.js로도 작성할 수 있지만 훨씬 많은 코드를 작성해야겠죠.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHub 위키 이벤트를 슬랙으로 받기 - 4. GitHub 웹훅 연결하기</title>
      <link>http://sixmen.com/ko/tech/2017-01-06-3-github-wiki-to-slack-setup-github-hook/</link>
      <pubDate>Fri, 06 Jan 2017 03:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-01-06-3-github-wiki-to-slack-setup-github-hook/</guid>
      <description>&lt;p&gt;이제 GitHub 웹훅을 처리할 수 있게 됐습니다.
&lt;a href=&#39;http://sixmen.com/ko/tech/2017-01-06-2-github-wiki-to-slack-aws-api-gateway/&#39;&gt;이전 글&lt;/a&gt;에서
생성한 URL을 GitHub에 설정해줍니다.&lt;/p&gt;

&lt;p&gt;GitHub 저장소의 Settings 탭에 가면 Webhooks 메뉴가 있습니다. 여기서 웹훅을 추가할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sixmen.com/img/ko/tech/2017-01-06-3-01.jpg&#34; alt=&#34;Add webhook&#34; /&gt;&lt;/p&gt;

&lt;p&gt;아래 부분에서 웹훅을 통해 받을 이벤트를 설정할 수 있습니다.
다른 이벤트는 이미 받고 있으므로 여기서는 Gollum(GitHub 위키 엔진) 이벤트만 체크해줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sixmen.com/img/ko/tech/2017-01-06-3-02.jpg&#34; alt=&#34;Select events&#34; /&gt;&lt;/p&gt;

&lt;p&gt;위키에 변경을 가하면 &#39;Recent Deliveries&#39; 섹션에 그 내용이 보여집니다.
Lambda 함수가 GitHub 위키 이벤트를 의도한대로 처리하는지 테스트하기 위해
이 내용을 사용할 있습니다.
AWS Lambda 편집화면에서 Actions -&amp;gt; Configure test event 에서 입력할 수 있습니다.&lt;/p&gt;

&lt;p&gt;다음은 최종 Lambda 코드입니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;AWS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;aws-sdk&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;https&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hookUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sendMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hookUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;headers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Length&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;byteLength&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;statusCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;statusCode&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;decryptHookUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hookUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hookUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;kms&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;AWS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;KMS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;blob&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;encryptedHookUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;base64&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;kms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;decrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;CiphertextBlob&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;blob&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hookUrl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Plaintext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hookUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;processGithubPayload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pages&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;repo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;repository&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;full_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;page_link&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;html_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sender_link&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sender&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;html_url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;payload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sender&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;login&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;username&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;github wiki&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;sb&#34;&gt;`[&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;repo&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;] &amp;lt;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;page_link&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;&amp;gt; is &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;page&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt; by &amp;lt;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sender_link&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;sb&#34;&gt;&amp;gt;`&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;decryptHookUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;processGithubPayload&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;channel&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;#auto-github&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;sendMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;success&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이제 위키를 수정하고 슬랙에 메시지가 표시되는 것을 확인하면 끝입니다.
수정내역이나 커밋 메시지를 표시해주면 좋은데 아쉽게도 해당 데이터는 없는 것 같습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHub 위키 이벤트를 슬랙으로 받기 - 3. AWS API Gateway 생성하기</title>
      <link>http://sixmen.com/ko/tech/2017-01-06-2-github-wiki-to-slack-aws-api-gateway/</link>
      <pubDate>Fri, 06 Jan 2017 02:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-01-06-2-github-wiki-to-slack-aws-api-gateway/</guid>
      <description>&lt;p&gt;GitHub 이벤트를 받으려면 GitHub에서 접근가능한 URL이 필요합니다.
&lt;a href=&#39;http://sixmen.com/ko/tech/2017-01-06-1-github-wiki-to-slack-protect-secret-using-kms/&#39;&gt;이전 글&lt;/a&gt;에서
만든 Lambda 함수를 외부에서 접근가능하게 하려면 AWS API Gateway를 사용하면 됩니다.&lt;/p&gt;

&lt;p&gt;API Gateway 콘솔에서 새 API를 생성합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sixmen.com/img/ko/tech/2017-01-06-2-01.jpg&#34; alt=&#34;Create API&#34; /&gt;&lt;/p&gt;

&lt;p&gt;생성된 직후에는 어떤 메소드도 없습니다.
GitHub 이벤트는 POST 메소드로 전달되므로 Resources에서 POST 메소드를 하나 생성합니다.&lt;/p&gt;

&lt;p&gt;Actions 메뉴에서 Create Method를 누른 후 POST를 선택하면 메소드가 생성됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sixmen.com/img/ko/tech/2017-01-06-2-02.jpg&#34; alt=&#34;Created POST Method&#34; /&gt;&lt;/p&gt;

&lt;p&gt;이 메소드에 우리가 생성한 Lambda 함수를 연결할 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sixmen.com/img/ko/tech/2017-01-06-2-03.jpg&#34; alt=&#34;Integration with Lambda Function&#34; /&gt;&lt;/p&gt;

&lt;p&gt;테스트 버튼을 누르면 API 테스트를 할 수 있습니다.
슬랙에 메시지가 오는지 확인해보세요.&lt;/p&gt;

&lt;p&gt;이제 이 API를 활성화할 차례입니다.
Actions에서 Deploy API를 선택합니다.
현재 stage가 없으므로 &#39;[New State]&#39;를 선택하고 prod라고 이름을 줍니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sixmen.com/img/ko/tech/2017-01-06-2-04.jpg&#34; alt=&#34;Setup deploy&#34; /&gt;&lt;/p&gt;

&lt;p&gt;이제 외부에서 접근가능한 URL이 생성됐습니다.
해당 URL에 POST 메소드로 접근할 수 있습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ curl -X POST https://&amp;lt;your-invoke-url&amp;gt;/prod
null
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이번에도 역시 슬랙에 메시지가 표시되면 제대로 설정된 것입니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHub 위키 이벤트를 슬랙으로 받기 - 2. AWS KMS를 이용해 키 보호</title>
      <link>http://sixmen.com/ko/tech/2017-01-06-1-github-wiki-to-slack-protect-secret-using-kms/</link>
      <pubDate>Fri, 06 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-01-06-1-github-wiki-to-slack-protect-secret-using-kms/</guid>
      <description>&lt;p&gt;&lt;a href=&#39;http://sixmen.com/ko/tech/2017-01-05-1-github-wiki-to-slack-setting-aws-lambda/&#39;&gt;이전 글&lt;/a&gt;에서는
AWS Lambda 함수를 생성해서 슬랙에 메시지를 보내는데 성공했습니다.
그런데 이때 사용하는 훅 URL이 그대로 코드에 들어가 있는게 마음에 걸립니다.
이 URL을 알면 외부에서 우리 슬랙 채널에 스팸을 보낼 수 있습니다.&lt;/p&gt;

&lt;p&gt;이번 글에서는 AWS KMS(Key Management Service)를 이용해서 이 URL을 보호하는 방법에 대해서 얘기합니다.&lt;/p&gt;

&lt;p&gt;AWS Lambda 생성시 blueprint에 slack-echo-command를 선택하면 이미 URL을 보호하는 절차에 대해서 설명하고 있습니다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;To encrypt your secrets use the following steps:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Create or use an existing KMS Key - &lt;a href=&#34;http://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html&#34;&gt;http://docs.aws.amazon.com/kms/latest/developerguide/create-keys.html&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Click the &amp;quot;Enable Encryption Helpers&amp;quot; checkbox&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Paste &lt;COMMAND_TOKEN&gt; into the kmsEncryptedToken environment variable and click encrypt&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;하나씩 따라해 봅시다.&lt;/p&gt;

&lt;p&gt;AWS IAM 화면에 들어가면 Encryption keys 메뉴가 있습니다.
다른 메뉴와는 달리 여기는 지역 선택이 필터 부분에 있습니다. 여기서 원하는 지역을 선택하고 &#39;Create Key&#39;를 선택합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sixmen.com/img/ko/tech/2017-01-06-1-01.jpg&#34; alt=&#34;Create key&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Alias만 입력하고 나머지는 특별히 선택하지 않아도 됩니다.&lt;/p&gt;

&lt;p&gt;키가 생성되면 생성한 Lambda 함수로 이동합니다.
코드 섹션 밑에 보면 &#39;Enable encryption helpers&#39; 체크박스가 있습니다.
활성화하고 &#39;Encryption key&#39;에 생성한 키를 설정합니다.&lt;/p&gt;

&lt;p&gt;&#39;Environment variables&#39;에 훅 URL을 넣고 &#39;Encrypt&#39;를 누르면 URL이 암호화됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sixmen.com/img/ko/tech/2017-01-06-1-02.jpg&#34; alt=&#34;Before encrypt&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sixmen.com/img/ko/tech/2017-01-06-1-03.jpg&#34; alt=&#34;After encrypt&#34; /&gt;&lt;/p&gt;

&lt;p&gt;변경사항을 저장하면 암호화된 URL이 표시됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sixmen.com/img/ko/tech/2017-01-06-1-04.jpg&#34; alt=&#34;Encrypted URL&#34; /&gt;&lt;/p&gt;

&lt;p&gt;이제 이 값을 이용하도록 Lambda 코드를 수정합니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;AWS&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;aws-sdk&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;https&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hookUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sendMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;c1&#34;&gt;// ... 이전과 같음&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;decryptHookUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hookUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hookUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;kms&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;AWS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;KMS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;blob&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;env&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;encryptedHookUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;base64&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;kms&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;decrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;CiphertextBlob&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;blob&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
          &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;reject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;hookUrl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Plaintext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ascii&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hookUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;decryptHookUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;#auto-github&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;This is a test message&amp;#39;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;sendMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;저장하고 테스트를 실행하면 이전과 같이 슬랙 채널에서 메시지를 볼 수 있습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GitHub 위키 이벤트를 슬랙으로 받기 - 1. AWS Lambda 설정</title>
      <link>http://sixmen.com/ko/tech/2017-01-05-1-github-wiki-to-slack-setting-aws-lambda/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-01-05-1-github-wiki-to-slack-setting-aws-lambda/</guid>
      <description>&lt;p&gt;크로키닷컴에서는 GitHub 이벤트(이슈 수정, PR등)를 슬랙으로 확인하고 있습니다.
그런데 아쉽게도 기본 GitHub 슬랙 앱은 GitHub 위키 이벤트는 처리하지 못합니다.
그래서 이를 자체적으로 구현하기로 했습니다.&lt;/p&gt;

&lt;p&gt;우선 이번글에서는 AWS Lambda를 통해 슬랙으로 메시지 보내는 방법에 대해서 설명합니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;외부에서 슬랙에 메시지를 보내기 위해서는 Incoming WebHooks을 설정해야 합니다.
슬랙에서 &#39;Apps &amp;amp; integrations&#39; 메뉴를 선택하면, App Directory 화면을 볼 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sixmen.com/img/ko/tech/2017-01-05-1-01.jpg&#34; alt=&#34;App Directory&#34; /&gt;&lt;/p&gt;

&lt;p&gt;여기서 Incoming WebHooks을 검색하면 선택하면 설정화면이 표시됩니다.
Add Configuration을 눌러서 새로운 설정을 추가합니다.&lt;/p&gt;

&lt;p&gt;메시지를 받을 채널을 선택하고 Add Incoming WebHooks integration을 누르면
설정이 생성됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sixmen.com/img/ko/tech/2017-01-05-1-02.jpg&#34; alt=&#34;Add Incoming WebHooks integration&#34; /&gt;&lt;/p&gt;

&lt;p&gt;설정을 생성한 후에 몇가지 수정을 할 수 있지만, 여기서는 그냥 넘어가겠습니다.
생성된 설정에서 중요한 것은 Webhook URL 입니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sixmen.com/img/ko/tech/2017-01-05-1-03.jpg&#34; alt=&#34;Webhook URL&#34; /&gt;&lt;/p&gt;

&lt;p&gt;밑에 친절하게 예제가 있습니다. 한번 테스트 해보세요.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ curl -X POST --data-urlencode &lt;span class=&#34;s1&#34;&gt;&amp;#39;payload={&amp;quot;channel&amp;quot;: &amp;quot;#auto-github&amp;quot;, &amp;quot;username&amp;quot;: &amp;quot;webhookbot&amp;quot;, &amp;quot;text&amp;quot;: &amp;quot;This is posted to #auto-github and comes from a bot named webhookbot.&amp;quot;, &amp;quot;icon_emoji&amp;quot;: &amp;quot;:ghost:&amp;quot;}&amp;#39;&lt;/span&gt; https://hooks.slack.com/services/&amp;lt;my-webhook-url&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;

&lt;p&gt;위 요청을 Node.js로 작성하면 다음과 같습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;use strict&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;url&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;https&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;https&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hookUrl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://hooks.slack.com/services/&amp;lt;my-webhook-url&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;sendMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;JSON&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;stringify&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hookUrl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;method&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;POST&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;headers&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Type&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;application/json&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;s1&#34;&gt;&amp;#39;Content-Length&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;byteLength&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;Promise&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;https&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;on&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;end&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;({&lt;/span&gt;
          &lt;span class=&#34;nx&#34;&gt;statusCode&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;statusCode&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;#auto-github&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;This is a test message&amp;#39;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;sendMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;

&lt;p&gt;위의 코드를 바탕으로 AWS Lambda 함수를 하나 만들면 됩니다.&lt;/p&gt;

&lt;p&gt;&#39;Select blueprint&#39; 단계에서 Blank Function을 선택합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sixmen.com/img/ko/tech/2017-01-05-1-04.jpg&#34; alt=&#34;Select blueprint&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&#39;Configure triggers&#39; 단계는 특별히 필요하지 않습니다.&lt;/p&gt;

&lt;p&gt;&#39;Configure function&#39; 단계에서 함수 이름을 입력하고, 위의 코드를 입력합니다.
다만 &lt;code&gt;exports.handler&lt;/code&gt; 메소드에서 메시지를 보내도록 수정합니다.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;handler&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;channel&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;#auto-github&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;This is a test message&amp;#39;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;sendMessage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;then&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;catch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sixmen.com/img/ko/tech/2017-01-05-1-05.jpg&#34; alt=&#34;Configuration function 1&#34; /&gt;&lt;/p&gt;

&lt;p&gt;기타 다른 설정은 건드리지 않아도 되지만 Role은 설정해줘야 합니다.
적절한 Role이 없는 경우 템플릿을 통해 생성할 수 있습니다.
&#39;KMS decryption permissions&#39;을 선택해서 Role을 생성합니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sixmen.com/img/ko/tech/2017-01-05-1-06.jpg&#34; alt=&#34;Select role&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&#39;Next&#39; -&amp;gt; &#39;Create function&#39;을 선택하면 Lambda 함수가 만들어집니다.
&#39;Test&#39; 버튼을 눌러 테스트를 하면 설정한 슬랙 채널에 메시지가 오는 것을 볼 수 있습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>언어 비교 - 현재 유닉스 시간</title>
      <link>http://sixmen.com/ko/tech/2017-01-04-1-language-comparison-date-current-unix-time/</link>
      <pubDate>Wed, 04 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-01-04-1-language-comparison-date-current-unix-time/</guid>
      <description>&lt;div class=&#39;alert alert-success&#39;&gt;
  유닉스 시간은 유닉스 Epoch(1970-01-01 00:00:00 +0000 (UTC))로 부터 지난 초 단위 시간을 말합니다.
&lt;/div&gt;

&lt;div class=&#39;langsheet&#39;&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;C&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_stdlib&#39;&gt;time_t&lt;/span&gt;&amp;nbsp;now&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;time&lt;/span&gt;(&lt;span class=&#39;cmd_keyword&#39;&gt;NULL&lt;/span&gt;);
  &lt;/div&gt;
  &lt;div class=&#39;panel-footer&#39;&gt;
    #include &amp;lt;time.h&amp;gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;C++&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_stdlib&#39;&gt;time_t&lt;/span&gt;&amp;nbsp;now&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;time&lt;/span&gt;(&lt;span class=&#39;cmd_keyword&#39;&gt;nullptr&lt;/span&gt;);
  &lt;/div&gt;
  &lt;div class=&#39;panel-footer&#39;&gt;
    #include &amp;lt;ctime&amp;gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;CoffeeScript&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    now&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Date&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;now&lt;/span&gt;()&amp;nbsp;/&amp;nbsp;&lt;span class=&#39;cmd_number&#39;&gt;1000&lt;/span&gt;&lt;br&gt;&lt;span class=&#39;cmd_hr&#39;&gt;&lt;/span&gt;&lt;br&gt;now&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Date&lt;/span&gt;().&lt;span class=&#39;cmd_stdlib&#39;&gt;getTime&lt;/span&gt;()&amp;nbsp;/&amp;nbsp;&lt;span class=&#39;cmd_number&#39;&gt;1000&lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Java&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_keyword&#39;&gt;long&lt;/span&gt;&amp;nbsp;now&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;System&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;currentTimeMillis&lt;/span&gt;()&amp;nbsp;/&amp;nbsp;&lt;span class=&#39;cmd_number&#39;&gt;1000&lt;/span&gt;;&lt;br&gt;&lt;span class=&#39;cmd_hr&#39;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;long&lt;/span&gt;&amp;nbsp;now&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Date&lt;/span&gt;().&lt;span class=&#39;cmd_stdlib&#39;&gt;getTime&lt;/span&gt;()&amp;nbsp;/&amp;nbsp;&lt;span class=&#39;cmd_number&#39;&gt;1000&lt;/span&gt;;
  &lt;/div&gt;
  &lt;div class=&#39;panel-footer&#39;&gt;
    import java.util.Date;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;JavaScript&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    now&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Date&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;now&lt;/span&gt;()&amp;nbsp;/&amp;nbsp;&lt;span class=&#39;cmd_number&#39;&gt;1000&lt;/span&gt;;&lt;br&gt;&lt;span class=&#39;cmd_hr&#39;&gt;&lt;/span&gt;&lt;br&gt;now&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;new&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Date&lt;/span&gt;().&lt;span class=&#39;cmd_stdlib&#39;&gt;getTime&lt;/span&gt;()&amp;nbsp;/&amp;nbsp;&lt;span class=&#39;cmd_number&#39;&gt;1000&lt;/span&gt;;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Kotlin&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_keyword&#39;&gt;val&lt;/span&gt;&amp;nbsp;now&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;System&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;currentTimeMillis&lt;/span&gt;()&amp;nbsp;/&amp;nbsp;&lt;span class=&#39;cmd_number&#39;&gt;1000&lt;/span&gt;&lt;br&gt;&lt;span class=&#39;cmd_hr&#39;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;val&lt;/span&gt;&amp;nbsp;now&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Date&lt;/span&gt;().&lt;span class=&#39;cmd_stdlib&#39;&gt;getTime&lt;/span&gt;()/&lt;span class=&#39;cmd_number&#39;&gt;1000&lt;/span&gt;
  &lt;/div&gt;
  &lt;div class=&#39;panel-footer&#39;&gt;
    import java.util.Date
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Lua&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    now&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;os&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;time&lt;/span&gt;()
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Objective-C&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_stdlib&#39;&gt;NSTimeInterval&lt;/span&gt;&amp;nbsp;now&amp;nbsp;=&amp;nbsp;[[&lt;span class=&#39;cmd_stdlib&#39;&gt;NSDate&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;date&lt;/span&gt;]&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;timeIntervalSince1970&lt;/span&gt;];
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Perl&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    $now&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;time&lt;/span&gt;;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;PHP&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    $now&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;time&lt;/span&gt;();
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Python&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_stdib&#39;&gt;time&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;time&lt;/span&gt;()
  &lt;/div&gt;
  &lt;div class=&#39;panel-footer&#39;&gt;
    import time
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Ruby&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    now&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Time&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;now&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;to_i&lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Swift&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_keyword&#39;&gt;let&lt;/span&gt;&amp;nbsp;now&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Date&lt;/span&gt;().&lt;span class=&#39;cmd_stdlib&#39;&gt;timeIntervalSince1970&lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>우부투에 JDK 설치하기</title>
      <link>http://sixmen.com/ko/tech/2016-12-28-1-install-jdk-ubuntu/</link>
      <pubDate>Wed, 28 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-28-1-install-jdk-ubuntu/</guid>
      <description>

&lt;p&gt;우분투에는 기본적으로 &lt;code&gt;default-jdk&lt;/code&gt;라는 패키지를 제공합니다.
이 패키지를 설치하면 OpenJDK(&lt;code&gt;openjdk-8-jdk&lt;/code&gt;)가 설치됩니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo apt-get install default-jdk
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;그런데 저 같은 경우 Java가 주력이 아니다 보니 OpenJDK를 써도 되는지 확신이 없었습니다.
그래서 Oracle JDK를 설치하기로 했습니다.&lt;/p&gt;

&lt;p&gt;Oracle JDK는 우분투 패키지에는 존재하지 않습니다.
하지만 &lt;a href=&#34;https://launchpad.net/ubuntu/+ppas&#34;&gt;우분투 Personal Package Archives&lt;/a&gt;에
&lt;a href=&#34;https://launchpad.net/~webupd8team/+archive/ubuntu/java&#34;&gt;Oracle JDK 패키지를 제공하는 PPA&lt;/a&gt;가 있습니다.&lt;br /&gt;
이를 이용해 Oracle JDK를 패키지로 설치할 수 있습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ sudo add-apt-repository ppa:webupd8team/java
$ sudo apt-get update
$ sudo apt-get install oracle-java8-installer
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;참고&#34;&gt;참고&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get&#34;&gt;https://www.digitalocean.com/community/tutorials/how-to-install-java-on-ubuntu-with-apt-get&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>스크립트 보호 - 모바일에서 AES 해독화 하기</title>
      <link>http://sixmen.com/ko/tech/2016-12-27-1-protect-script-decrypt-aes-mobile/</link>
      <pubDate>Tue, 27 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-27-1-protect-script-decrypt-aes-mobile/</guid>
      <description>&lt;p&gt;이번에는 &lt;a href=&#39;http://sixmen.com/ko/tech/2016-12-27-1-protect-script-decrypt-aes-mobile/&#39;&gt;전편&lt;/a&gt;에서
암호화한 파일을 모바일 환경(iOS, 안드로이드)에서 해독화 해보겠습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;iOS에서 AES 해독화를 하기 위해서는 CommonCrypto 라이브러리를 사용합니다.
Swift에서 사용하기 위해서 Bridging-Header.h에 다음을 포함하면 됩니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-objective-c&#34; data-lang=&#34;objective-c&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;#import &amp;lt;CommonCrypto/CommonCryptor.h&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;암호화/해독화는 CCCrypt 함수를 사용하면 됩니다.
그런데 함수 원형을 보면 key와 iv(Initialization vector)란 인자가 보입니다.
OpenSSL을 써서 암호화 할때는 보지 못한 것입니다.
여기에 어떤 값을 넣어줘야 할까요?&lt;/p&gt;

&lt;p&gt;찾아보니 OpenSSL은 암호에서 key와 iv를 유도해서 사용한다고 합니다
(&lt;a href=&#34;https://en.wikipedia.org/wiki/PBKDF2&#34;&gt;PBKDF2&lt;/a&gt; 참고).
-p 옵션을 사용하면 이 정보를 볼 수 있습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ openssl aes-256-cbc -d -in encrypted.dat -out restored.txt -k &lt;span class=&#34;m&#34;&gt;1234&lt;/span&gt; -p
&lt;span class=&#34;nv&#34;&gt;salt&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;FBA42868201CC0ED
&lt;span class=&#34;nv&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;A8C174B6F635A7770CE3AE18FCB7290E7E09F289D1187CE0E28A842E07057EDA
&lt;span class=&#34;nv&#34;&gt;iv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;7B3E50E41A9F2A33A568F4C34D2C129C
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이제 해독화를 해봅니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 암호화된 데이터 준비&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;url&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Bundle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;forResource&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;encrypted&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;withExtension&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;dat&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;encrypted_data&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;contentsOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;url&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// key, iv 준비&lt;/span&gt;
&lt;span class=&#34;c1&#34;&gt;// hexadecimal 메소드는 http://stackoverflow.com/a/26502285 참고&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;A8C174B6F635A7770CE3AE18FCB7290E7E09F289D1187CE0E28A842E07057EDA&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hexadecimal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;iv&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;7B3E50E41A9F2A33A568F4C34D2C129C&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hexadecimal&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 해독화된 데이터를 받을 공간 준비&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encrypted_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kCCBlockSizeAES128&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;dataOutMoved&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 해독화&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;result&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;withUnsafeMutableBytes&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outputPtr&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CCCrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CCOperation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kCCDecrypt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;CCAlgorithm&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kCCAlgorithmAES&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;CCOptions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;kCCOptionPKCS7Padding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;kCCKeySizeAES256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!),&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;UInt8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;](&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encrypted_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!),&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encrypted_data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;outputPtr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dataOutMoved&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;bp&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dataOutMoved&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 해독화된 데이터를 문자열로 변환&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;outputStr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;data&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encoding&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;utf8&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;실제로 나온 결과를 보면 원본과 다릅니다.
그것은 OpenSSL이 암호화한 파일 앞에 16 바이트의 소금(salt)가 추가되어 있기 때문입니다.
16 바이트를 제거한 파일을 입력으로 주면 제대로 해독화가 됩니다.&lt;/p&gt;

&lt;p&gt;그런데 원본 파일을 변경한 후 다시 암호화를 해보면 key와 iv가 다른 값으로 바뀝니다.
이렇게 되면 이 값을 하드코딩할 수는 없습니다.
정식으로는 암호와 소금으로 부터 key와 iv를 유도해야 겠지만, 귀찮으니 다른 방법을 찾아봅니다.
다행히 OpenSSL에는 소금을 사용하지 않는 옵셥이 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ openssl aes-256-cbc -in original.txt -out encrypted.dat -nosalt -k 1234
$ openssl aes-256-cbc -d -in encrypted.dat -out restored.txt -nosalt -k &lt;span class=&#34;m&#34;&gt;1234&lt;/span&gt; -p
&lt;span class=&#34;nv&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;81DC9BDB52D04DC20036DBD8313ED055CC5776D16A1FB6E4AFA34B18395DA656
&lt;span class=&#34;nv&#34;&gt;iv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;6305309076F3AB48FF8FEF0F3B70A434
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;이렇게 하면 key와 iv가 항상 일정합니다. 그리고 암호화된 파일에서 소금 부분을 삭제하는 작업을 하지 않아도 됩니다.&lt;/p&gt;

&lt;p&gt;물론 보통의 경우 이렇게 하면 안 되겠지만, 이번 작업에서는 이 정도로 충분하다는 판단을 했습니다.
실제로는 암호도 사용하지 않고 key와 iv를 직접 주어서 암호화를 했습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ openssl aes-256-cbc -in original.txt -out encrypted.dat -K &lt;span class=&#34;m&#34;&gt;01020304&lt;/span&gt; -iv 0a0b0c0d -nosalt
$ openssl aes-256-cbc -d -in encrypted.dat -out restored.txt -K &lt;span class=&#34;m&#34;&gt;01020304&lt;/span&gt; -iv 0a0b0c0d -nosalt -p
&lt;span class=&#34;nv&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0102030400000000000000000000000000000000000000000000000000000000
&lt;span class=&#34;nv&#34;&gt;iv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;0A0B0C0D000000000000000000000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;hr /&gt;

&lt;p&gt;똑같은 동작을 Java(안드로이드)에서도 할 수 있습니다.
Java에서는 javax.crypto 패키지를 사용합니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;c1&#34;&gt;// 암호화된 데이터 준비&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;encrypted_data&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Files&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;readAllBytes&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Paths&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;encrypted.dat&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;));&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// key, iv 준비&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BigInteger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0102030400000000000000000000000000000000000000000000000000000000&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toByteArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BigInteger&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0A0B0C0D000000000000000000000000&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;toByteArray&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;();&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 해독화 준비&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;getInstance&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;AES/CBC/PKCS5Padding&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;SecretKeySpec&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keySpec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;SecretKeySpec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;AES&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;IvParameterSpec&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ivSpec&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IvParameterSpec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iv&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;DECRYPT_MODE&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;keySpec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ivSpec&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;// 해독화&lt;/span&gt;
&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;output&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;cipher&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;na&#34;&gt;doFinal&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;encrypted_data&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;String&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;outputStr&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;JVM 위에서 위 코드를 실행하면 &lt;code&gt;java.security.InvalidKeyException: Illegal key size&lt;/code&gt; 에러가 발생할 수 있습니다.
그것은 기본 배포되는 JRE가 256 비트의 키를 허용하지 않기 때문입니다.
aes-128-cbc로 암호화하고 key에 16 바이트(=128 비트)의 키를 주면 잘 동작합니다.
제가 목표로 한 안드로이드 환경에서는 256 비트의 키도 사용할 수 있었습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;여기까지의 내용을 기반으로 AES 알고리즘을 써서 단순한 스크립트 보호를 해봤습니다.
더 깊게 들어갈 부분도 있겠지만, AES를 다루는데 도움이 되었으면 합니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>스크립트 보호 - AES 암호화/해독화 하기</title>
      <link>http://sixmen.com/ko/tech/2016-12-26-1-protect-script-aes-encrypt-decrypt/</link>
      <pubDate>Mon, 26 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-26-1-protect-script-aes-encrypt-decrypt/</guid>
      <description>&lt;p&gt;&lt;a href=&#39;http://sixmen.com/ko/tech/2016-12-23-1-protect-script-encryption-types/&#39;&gt;전편&lt;/a&gt;에 이어
실제로 파일을 암호화/해독화 해보겠습니다.&lt;/p&gt;

&lt;p&gt;OpenSSL 커맨드 라인 도구를 사용하면 프로그램을 따로 작성하지 않아도 암호화를 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;우선 원본 파일을 준비합니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ cat original.txt
Hello World
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;openssl list-cipher-commands&lt;/code&gt;를 실행하면 사용가능한 알고리즘을 보여줍니다.
그중 AES 알고리즘은 다음과 같습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ openssl list-cipher-commands &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep aes
aes-128-cbc
aes-128-ecb
aes-192-cbc
aes-192-ecb
aes-256-cbc
aes-256-ecb
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;128, 192, 256은 키의 크기입니다. CBC, ECB는 &lt;a href=&#34;https://ko.wikipedia.org/wiki/%EB%B8%94%EB%A1%9D_%EC%95%94%ED%98%B8_%EC%9A%B4%EC%9A%A9_%EB%B0%A9%EC%8B%9D&#34;&gt;블록 암호 운용 방식&lt;/a&gt;을 나타냅니다. 여기서는 aes-256-cbc로 암호화를 해보겠습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ openssl aes-256-cbc -in original.txt -out encrypted.dat
enter aes-256-cbc encryption password:
Verifying - enter aes-256-cbc encryption password:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;해독화는 -d 옵션을 사용합니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ openssl aes-256-cbc -d -in encrypted.dat -out restored.txt
enter aes-256-cbc decryption password:
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;암호화를 자동화하려면 암호를 명령에 포함시켜야 합니다. 이를 위해서는 -k 나 -pass 옵션을 사용합니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ openssl aes-256-cbc -in original.txt -out encrypted.dat -k 1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;또는&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ openssl aes-256-cbc -in original.txt -out encrypted.dat -pass pass:1234
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;암호를 파일에서 읽도록 하려면 -kfile 이나 -pass 옵션을 사용합니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ openssl aes-256-cbc -in original.txt -out encrypted.dat -kfile password_file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;또는&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ openssl aes-256-cbc -in original.txt -out encrypted.dat -pass file:password_file
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;다음에는 암호화한 파일을 iOS나 Android에서 해독화하는 방법에 대해서 알아보겠습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>스크립트 보호 - 암호화 종류</title>
      <link>http://sixmen.com/ko/tech/2016-12-23-1-protect-script-encryption-types/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-23-1-protect-script-encryption-types/</guid>
      <description>&lt;p&gt;한때 하이브리드 앱이 유행했지만 성능문제로 어느 이상을 커지지는 못했습니다.
그러던 와중에 React Native가 나오면서 다시 하나의 코드로 여러 플랫폼을 지원하는
방식이 탄력을 받고 있습니다.&lt;/p&gt;

&lt;p&gt;저도 React Native등을 써서 한번의 코딩으로 iOS와 안드로이드 모두를 지원하고 싶은
생각은 간절하지만, 같이 일하는 기획자가 그렇게 만들어진 앱의 느낌에 만족하지 못하는 고로,
더 많은 발전이 있기 전에는 React Native로 넘어가지 못할 것 같습니다.&lt;/p&gt;

&lt;p&gt;그렇지만 현재 만들고 있는 앱을 네이티브(Swift, Java등)로만 작성하고 있는 것은 아닙니다.
UI/UX에 상관이 없고 자주 갱신되어야 하는 부분은 JavaScript로 작성해서 앱 업데이트 없이도
갱신할 수 있도록 하고 있습니다.&lt;/p&gt;

&lt;p&gt;그런데 이 스크립트가 나름 앱의 핵심 노하우라고 여기고 있기에 외부에서 보지 못하도록 하고 싶었습니다.
물론 난독화(uglify)만으로도 분석이 어려워지긴 합니다.
그래도 간단한 암호화라도 추가 하고 싶어서 조금 찾아봤습니다.&lt;/p&gt;

&lt;p&gt;암호화 종류를 살펴보기에 앞서 짚어볼 가장 중요한 점은 &#39;100% 안전한 방법은 없다&#39; 입니다.
당연한 것이 이 스크립트는 언젠가 JavaScript 엔진이 이해할 수 있는 형태로 변환되어야 하기 때문입니다.
다만 적어도 단순히 ipa, apk를 푸는 것만으로 스크립트를 가져가는 것은 방지하고 싶었습니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;암호화는 일단 크게 대칭 방식과 비대칭 방식이 있습니다.&lt;/p&gt;

&lt;p&gt;대칭 방식은 암호화화 해독화를 같은 키로 하는 것입니다. 속도가 빠른 대신 키를 양측이 모두
알고 있어야 하기에 키가 노출될 가능성이 높습니다.
주요 알고리즘으로 AES가 있습니다.&lt;/p&gt;

&lt;p&gt;비대칭 방식은 암호화화 해독화를 다른 키로 하는 것입니다. 속도가 느린 대신 해독화 키(비밀 키)를
나만 가지고 있기 때문에 노출될 가능성이 적어집니다.
주요 알고리즘으로 RSA가 있습니다.&lt;/p&gt;

&lt;p&gt;반면 보안에 관련된 얘기에서 종종 나오곤 하는 MD5, SHA, HMAC등은 해시를 만들어내는 것으로,
원문이 변형되지 않았는지(무결성) 검사하기 위함이지 그 자체로 원문을 복원하지는 못합니다.
다만 &#39;암호가 MD5로 저장되어서 원래 암호를 얻어냈다&#39; 같은 뉴스가 있는 것은 원문(암호)의 크기가
작기 때문에 높은 확률로 원문이라고 짐작되는 글을 알아냈다라는 것이지, 원문을 복원했다는 것은 아닙니다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;처음에는 내 키가 노출되는게 꺼려져서 RSA를 알아봤습니다.
그런데 RSA는 암호화하려는 데이터가 키보다 작아야 한다는 것을 알게 됐습니다.
그렇기에 원문 암호화는 AES로 하지만 그 키는 RSA로 암호화하는 방식등을 사용하는 것 같습니다.&lt;/p&gt;

&lt;p&gt;그래서 스크립트는 AES로 암호화하기로 했습니다.
암호화 키는 RSA로 암호화를 하려다가 키를 얻기 위해 앱을 해킹한다면 어떻게 하든
알아낼 수 있을 것으로 판단해서, 암호화 키는 문자열로 바로 노출되는 것만 막는 정도로 처리하기로 했습니다.&lt;/p&gt;

&lt;p&gt;다음에는 실제로 AES로 암호화 하는 방법에 대해서 알아보겠습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>언어 비교 - 함수 매개 변수에 기본값 지정</title>
      <link>http://sixmen.com/ko/tech/2016-12-19-1-language-comparison-function-default-argument/</link>
      <pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-19-1-language-comparison-function-default-argument/</guid>
      <description>&lt;div class=&#39;langsheet&#39;&gt;

&lt;div class=&#39;panel panel-warning&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;C&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    해당 기능이 존재하지 않음
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;C++&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_keyword&#39;&gt;double&lt;/span&gt;&amp;nbsp;logarithm(&lt;span class=&#39;cmd_keyword&#39;&gt;double&lt;/span&gt;&amp;nbsp;x,&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;double&lt;/span&gt;&amp;nbsp;base=&lt;span class=&#39;cmd_number&#39;&gt;10&lt;/span&gt;)&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;(x)&amp;nbsp;/&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;(base);&lt;br&gt;}
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;CoffeeScript&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    logarithm&amp;nbsp;=&amp;nbsp;(x,&amp;nbsp;base=&lt;span class=&#39;cmd_number&#39;&gt;10&lt;/span&gt;)&amp;nbsp;-&amp;gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Math&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;(x)&amp;nbsp;/&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Math&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;(base)
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Java&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_keyword&#39;&gt;double&lt;/span&gt;&amp;nbsp;logarithm(&lt;span class=&#39;cmd_keyword&#39;&gt;double&lt;/span&gt;&amp;nbsp;x)&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;return&lt;/span&gt;&amp;nbsp;logarithm(x,&amp;nbsp;&lt;span class=&#39;cmd_number&#39;&gt;10&lt;/span&gt;);&lt;br&gt;}&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;double&lt;/span&gt;&amp;nbsp;logarithm(&lt;span class=&#39;cmd_keyword&#39;&gt;double&lt;/span&gt;&amp;nbsp;x,&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;double&lt;/span&gt;&amp;nbsp;base)&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Math&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;(x)&amp;nbsp;/&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Math&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;(base);&lt;br&gt;}
  &lt;/div&gt;
  &lt;div class=&#39;panel-footer&#39;&gt;
    use method overloading
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;JavaScript&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_keyword&#39;&gt;function&lt;/span&gt;&amp;nbsp;logarithm(x,&amp;nbsp;base)&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;if&lt;/span&gt;&amp;nbsp;(base==&lt;span class=&#39;cmd_keyword&#39;&gt;null&lt;/span&gt;)&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;base&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_number&#39;&gt;10&lt;/span&gt;;&lt;br&gt;&amp;nbsp;&amp;nbsp;}&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Math&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;(x)&amp;nbsp;/&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Math&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;(base);&lt;br&gt;}
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Kotlin&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_keyword&#39;&gt;fun&lt;/span&gt;&amp;nbsp;logarithm(x:&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;Double&lt;/span&gt;,&amp;nbsp;base:&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;Double&lt;/span&gt;=&lt;span class=&#39;cmd_number&#39;&gt;10.0&lt;/span&gt;):&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;Double&lt;/span&gt;&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Math&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;(x)&amp;nbsp;/&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Math&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;(base)&lt;br&gt;}
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Lua&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_keyword&#39;&gt;function&lt;/span&gt;&amp;nbsp;logarithm(x,&amp;nbsp;base)&lt;br&gt;&amp;nbsp;&amp;nbsp;base&amp;nbsp;=&amp;nbsp;base&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;or&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_number&#39;&gt;10&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;math&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;(x)&amp;nbsp;/&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;math&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;(base)&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;end}
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-warning&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Objective-C&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    해당 기능이 존재하지 않음
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Perl&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_keyword&#39;&gt;sub&lt;/span&gt;&amp;nbsp;logarithm&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;my&lt;/span&gt;&amp;nbsp;$x&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;shift&lt;/span&gt;;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;my&lt;/span&gt;&amp;nbsp;$base&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;shift&lt;/span&gt;&amp;nbsp;//&amp;nbsp;&lt;span class=&#39;cmd_number&#39;&gt;10&lt;/span&gt;;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;($x)&amp;nbsp;/&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;($base);&lt;br&gt;}
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;PHP&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_keyword&#39;&gt;function&lt;/span&gt;&amp;nbsp;logarithm($x,&amp;nbsp;$base=&lt;span class=&#39;cmd_number&#39;&gt;10&lt;/span&gt;)&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;($x)&amp;nbsp;/&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;($base);&lt;br&gt;}
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Python&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_keyword&#39;&gt;def&lt;/span&gt;&amp;nbsp;logarithm(x,&amp;nbsp;base=&lt;span class=&#39;cmd_number&#39;&gt;10&lt;/span&gt;):&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;math&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;(x)&amp;nbsp;/&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;math&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;(base)
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Ruby&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_keyword&#39;&gt;def&lt;/span&gt;&amp;nbsp;logarithm(x,&amp;nbsp;base=&lt;span class=&#39;cmd_number&#39;&gt;10&lt;/span&gt;)&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Math&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;(x)&amp;nbsp;/&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Math&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;(base)&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;end&lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Swift&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_keyword&#39;&gt;func&lt;/span&gt;&amp;nbsp;logarithm(x:&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;Double&lt;/span&gt;,&amp;nbsp;base:&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;Double&lt;/span&gt;=&lt;span class=&#39;cmd_number&#39;&gt;10&lt;/span&gt;)&amp;nbsp;-&amp;gt;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;Double&lt;/span&gt;&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;return&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;(x)&amp;nbsp;/&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;log&lt;/span&gt;(base)&lt;br&gt;}
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>iOS에서 년도를 구할 때 비정상적인 값이 나오는 문제</title>
      <link>http://sixmen.com/ko/tech/2016-12-16-1-ios-calendar/</link>
      <pubDate>Fri, 16 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-16-1-ios-calendar/</guid>
      <description>&lt;p&gt;지그재그 앱을 사용하는 사용자를 분석할 때 사용하기 위해서
최근 업데이트에 나이를 입력받는 화면이 추가되었습니다.&lt;/p&gt;

&lt;p&gt;입력은 나이를 받지만 나이는 매년 달라지기 때문에 고정된 값인 태어난 년도로 변환하여 저장하고 있습니다.
그런데 대부분은 정상적인 년도가 들어오는데 일부 사용자의 태어난 년도가 10이하 또는 2500이상인 문제가 있었습니다.&lt;/p&gt;

&lt;p&gt;처음에는 사용자가 게임등을 위해 핸드폰의 시간을 변경해서 발생했다고 생각했습니다.
하지만 값이 너무 튀었고, 또 그렇게 값이 다양하지는 않았습니다.&lt;/p&gt;

&lt;p&gt;그러던 중에 값이 이상한 경우는 모두 iOS라는 사실을 깨달았습니다.
그래도 짐작가는 것은 없던 차에 값이 2500~2600사이라는 것을 보고 혹시나 해서 &#39;ios year 2500&#39;이라는
검색어로 검색을 해봤습니다. 그랬더니 &lt;a href=&#34;http://forums.imore.com/general-apple-news-discussion/262432-my-ipad-my-set-year-2558-a.html&#34;&gt;my iPad my set year is 2558 BE?&lt;/a&gt;라는
문서가 딱 처음에 나왔습니다.&lt;/p&gt;

&lt;p&gt;결론적으로 iOS는 그레고리언 달력 외에도 일본력과 불교력을 지원합니다.
올해가 일본력으로 헤이세이 28년이기 때문에 나이를 20으로 입력하면 태어난 년도가 9가 됩니다.
불기로는 올해가 2560년이고 태어난 20살은 태어난 년도가 2541이 됩니다.&lt;/p&gt;

&lt;p&gt;이것을 깨닫고 다시 태어난 년도가 이상한 사용자의 사용언어를 살펴보니 일본력은 일본어 사용자,
불교력은 태국어등 사용자로 나왔습니다.
지극히 한국과 한국어에 특화된 지그재그 서비스라고 생각하고 있었는데 드물지만 외국어 사용자가 있다는 사실이 놀라웠습니다.&lt;/p&gt;

&lt;p&gt;기술적으로는&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;calendar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Calendar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// &amp;lt;--&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;components&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;calendar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;dateComponents&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;year&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;],&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;from&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;currentYear&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;components&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;year&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;??&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;2016&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;로 되어 있던 것을&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-swift&#34; data-lang=&#34;swift&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;calendar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Calendar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;identifier&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;gregorian&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;로 변경했더니 사용자가 설정한 캘린더와 상관없이 기대한 값이 반환되었습니다.&lt;/p&gt;

&lt;p&gt;혹시 유사한 증상이 있을 경우 한번 의심해보시면 좋을 것 같습니다.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>문자열이 여러개의 패턴에 일치하는지 여부 검사하기</title>
      <link>http://sixmen.com/ko/tech/2016-12-15-1-match-multiple-patterns/</link>
      <pubDate>Thu, 15 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-15-1-match-multiple-patterns/</guid>
      <description>&lt;p&gt;지그재그에서는 현재 하루에 수천만개의 사용자 로그가 쌓이고 있습니다.
그리고 이 로그를 분석해 사용자가 얼마나 쇼핑몰에 가입을 하는지,
주문을 얼마나 하는지 살피고 있습니다.&lt;/p&gt;

&lt;p&gt;그런데 지그재그가 지원하는 수많은 쇼핑몰은 다양한 솔루션을 사용하고 있고,
그에 따라 패턴도 전부 제각각입니다.
따라서 어떤 로그가 가입 페이지인지, 주문 페이지인지 확인하기 위해서
모든 솔루션의 패턴과 대조를 해야 합니다.&lt;/p&gt;

&lt;p&gt;오늘은 이러한 대조를 어떻게 하고 있는지 살펴보겠습니다.
분석은 여러가지 언어로 하고 있지만, 여기서는 JavaScript를 살펴보겠습니다.&lt;/p&gt;

&lt;p&gt;JavaScript에서 어떤 문자열이 패턴을 포함하고 있는지 검사하는 방법은 다음과 같은 것들이 있습니다.
&lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf&#34;&gt;String.prototype.indexOf&lt;/a&gt;,
&lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/includes&#34;&gt;String.prototype.includes&lt;/a&gt;,
&lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/String/match&#34;&gt;String.prototype.match&lt;/a&gt;,
&lt;a href=&#34;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test&#34;&gt;RegExp.prototype.test&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;우선 10만개짜리 로그들을 놓고 간단한 문자열 포함 여부 검사를 각 방법으로 해서 시간을 비교해봤습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34; data-lang=&#34;coffeescript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;fs = &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;fs&amp;#39;&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;logs = &lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;readFileSync&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;logs&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;split&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;nv&#34;&gt;run = &lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;(name, fn) -&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;start = &lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;fn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s&#34;&gt; - &lt;/span&gt;&lt;span class=&#34;si&#34;&gt;#{&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;now&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;ms&amp;quot;&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;indexOf&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;count = &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logs&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;includes&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;count = &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logs&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;includes&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;count = &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logs&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/o/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;match&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;count = &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logs&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/o/&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;다음은 그 결과입니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;indexOf - 6517ms
includes - 7247ms
test - 13539ms
match - 14369ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;속도 차이가 많아보입니다.&lt;/p&gt;

&lt;p&gt;이번에는 검색 패턴을 좀더 실제에 가깝게 해봤습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34; data-lang=&#34;coffeescript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;indexOf&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;count = &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logs&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;join.html&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;includes&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;count = &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logs&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;includes&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;join.html&amp;#39;&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;count = &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logs&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/join\.html/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;match&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;count = &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logs&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/join\.html/&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;다음은 그 결과입니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;indexOf - 6812ms
includes - 7947ms
test - 10420ms
match - 10943ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;indexOf, includes에 대해서 시간이 증가하는 것은 예상된 것이지만,
정규식을 쓰는 경우 오히려 시간이 감소했습니다.
혹시 이유를 아시는 분은 알려주시면 감사하겠습니다.&lt;/p&gt;

&lt;p&gt;그래도 indexOf가 가장 빠르지만, 우리가 원하는 패턴은 하나가 아닙니다.
패턴을 두개로 늘려봤습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34; data-lang=&#34;coffeescript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;indexOf&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;count = &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logs&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;join.html&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;indexOf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;join_contract.html&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;includes&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;count = &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logs&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;includes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;join.html&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;or&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;includes&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;join_contract.html&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;test&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;count = &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logs&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/join\.html|join_contract\.html/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;test&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;run&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#39;match&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nv&#34;&gt;count = &lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;logs&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;match&lt;/span&gt; &lt;span class=&#34;sr&#34;&gt;/join\.html|join_contract\.html/&lt;/span&gt;
      &lt;span class=&#34;nx&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;다음은 그 결과입니다.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;indexOf - 12686ms
includes - 13864ms
test - 11690ms
match - 12089ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;패턴이 두개만 되도 정규식이 빠릅니다. 심지어 저희는 패턴이 일단 10개는 넘습니다.
그래서 정규식의 test를 쓰는 것으로 결정을 했습니다.
그리고 알려진 패턴을 추가했습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34; data-lang=&#34;coffeescript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PATTERN = &lt;/span&gt;&lt;span class=&#34;sr&#34;&gt;/join\.html|join_contract\.html|member\/register|register_form\.php|..../&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;10개미만일때는 그래도 괜찮은데 길어지니까 어디까지가 하나의 패턴인지 눈에 안 들어옵니다.
거기에 일일이 기억하기 어려워서 각 패턴이 어떤 솔루션의 것인지 주석을 달고 싶어졌습니다.
그래서 정규식을 여러 줄로 나눠서 쓸 수 있는지 찾아봤습니다.
몇몇언어(예. Perl)는 정규식 자체를 여러 줄로 나눌 수 있지만 JavaScript는 그런 문법은 없는 것 같습니다.&lt;/p&gt;

&lt;p&gt;방법을 찾아보니 &lt;a href=&#34;http://stackoverflow.com/q/12317049&#34;&gt;regex - How to split a long regular expression into multiple lines in JavaScript? - Stack Overflow&lt;/a&gt;를 찾을 수 있었습니다.
그 중에서도 단순히 문자열을 합친 후 RegExp 생성자를 이용하는 것은 문자열 escape에 신경을 써야 해서,
최종적으로는 &lt;a href=&#34;http://stackoverflow.com/a/34755045&#34;&gt;두번째 답변&lt;/a&gt;의 방법을 이용하기로 했습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-coffeescript&#34; data-lang=&#34;coffeescript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;PATTERNS = &lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;
    &lt;span class=&#34;sr&#34;&gt;/join\.html/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 솔루션 A&lt;/span&gt;
    &lt;span class=&#34;sr&#34;&gt;/join_contract\.html/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 솔루션 B&lt;/span&gt;
    &lt;span class=&#34;sr&#34;&gt;/member\/register/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 솔루션 C&lt;/span&gt;
    &lt;span class=&#34;sr&#34;&gt;/register_form\.php/&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;# 솔루션 D&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;...&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;nv&#34;&gt;PATTERN_RE = &lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;RegExp&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;PATTERNS&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;(p) -&amp;gt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;source&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;join&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이상 패턴 일치 여부 검사 방법이였습니다.
(원래는 JavaScript에서 정규식을 여러 줄로 쓰는 방법에 대해서 쓰려던 건데 사족이 붙어서 길어졌네요)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>언어 비교 - 정규식 캡쳐링 그룹</title>
      <link>http://sixmen.com/ko/tech/2016-12-14-1-language-comparison-regular-expression-capturing-group/</link>
      <pubDate>Wed, 14 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-14-1-language-comparison-regular-expression-capturing-group/</guid>
      <description>&lt;div class=&#39;langsheet&#39;&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;C&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_keyword&#39;&gt;const&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;char&lt;/span&gt;&amp;nbsp;*str&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_string&#39;&gt;&#34;2016-12-05&#34;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#39;cmd_stdlib&#39;&gt;regex_t&lt;/span&gt;&amp;nbsp;rx;&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span class=&#39;cmd_stdlib&#39;&gt;regcomp&lt;/span&gt;(&amp;amp;rx,&amp;nbsp;&#34;([[:digit:]]{4})-([[:digit:]]{2})-([[:digit:]]{2})&#34;,&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;REG_EXTENDED&lt;/span&gt;)==0)&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;regmatch_t&lt;/span&gt;&amp;nbsp;m[&lt;span class=&#39;cmd_number&#39;&gt;4&lt;/span&gt;];&lt;br&gt;&amp;nbsp;&amp;nbsp;if&amp;nbsp;(&lt;span class=&#39;cmd_stdlib&#39;&gt;regexec&lt;/span&gt;(&amp;amp;rx,&amp;nbsp;str,&amp;nbsp;&lt;span class=&#39;cmd_number&#39;&gt;4&lt;/span&gt;,&amp;nbsp;m,&amp;nbsp;&lt;span class=&#39;cmd_number&#39;&gt;0&lt;/span&gt;)==&lt;span class=&#39;cmd_number&#39;&gt;0&lt;/span&gt;)&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;int&lt;/span&gt;&amp;nbsp;year&amp;nbsp;=&amp;nbsp;str2int(str+m[&lt;span class=&#39;cmd_number&#39;&gt;1&lt;/span&gt;].&lt;span class=&#39;cmd_stdlib&#39;&gt;rm_so&lt;/span&gt;,&amp;nbsp;m[&lt;span class=&#39;cmd_number&#39;&gt;1&lt;/span&gt;].&lt;span class=&#39;cmd_stdlib&#39;&gt;rm_eo&lt;/span&gt;&amp;nbsp;-&amp;nbsp;m[&lt;span class=&#39;cmd_number&#39;&gt;1&lt;/span&gt;].&lt;span class=&#39;cmd_stdlib&#39;&gt;rm_so&lt;/span&gt;);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;int&lt;/span&gt;&amp;nbsp;month&amp;nbsp;=&amp;nbsp;str2int(str+m[&lt;span class=&#39;cmd_number&#39;&gt;2&lt;/span&gt;].&lt;span class=&#39;cmd_stdlib&#39;&gt;rm_so&lt;/span&gt;,&amp;nbsp;m[&lt;span class=&#39;cmd_number&#39;&gt;2&lt;/span&gt;].&lt;span class=&#39;cmd_stdlib&#39;&gt;rm_eo&lt;/span&gt;&amp;nbsp;-&amp;nbsp;m[&lt;span class=&#39;cmd_number&#39;&gt;2&lt;/span&gt;].&lt;span class=&#39;cmd_stdlib&#39;&gt;rm_so&lt;/span&gt;);&lt;br&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;int&lt;/span&gt;&amp;nbsp;day&amp;nbsp;=&amp;nbsp;str2int(str+m[&lt;span class=&#39;cmd_number&#39;&gt;3&lt;/span&gt;].&lt;span class=&#39;cmd_stdlib&#39;&gt;rm_so&lt;/span&gt;,&amp;nbsp;m[&lt;span class=&#39;cmd_number&#39;&gt;3&lt;/span&gt;].&lt;span class=&#39;cmd_stdlib&#39;&gt;rm_eo&lt;/span&gt;&amp;nbsp;-&amp;nbsp;m[&lt;span class=&#39;cmd_number&#39;&gt;3&lt;/span&gt;].&lt;span class=&#39;cmd_stdlib&#39;&gt;rm_so&lt;/span&gt;);&lt;br&gt;&amp;nbsp;&amp;nbsp;}&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;regfree&lt;/span&gt;(&amp;amp;rx);&lt;br&gt;}
  &lt;/div&gt;
  &lt;div class=&#39;panel-footer&#39;&gt;
    #include &amp;lt;regex.h&amp;gt;&lt;br&gt;
int str2int(const char *str, int len) {&lt;br&gt;
  int value = 0;&lt;br&gt;
  char *tmp = strndup(str, len);&lt;br&gt;
  value = strtol(tmp, (char **)NULL, 10);&lt;br&gt;
  free(tmp);&lt;br&gt;
  return value;&lt;br&gt;
}
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;C++&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_stdlib&#39;&gt;string&lt;/span&gt;&amp;nbsp;str(&lt;span class=&#39;cmd_string&#39;&gt;&#34;2016-12-05&#34;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#39;cmd_stdlib&#39;&gt;regex&lt;/span&gt;&amp;nbsp;rx(&lt;span class=&#39;cmd_string&#39;&gt;&#34;(\\d{4})-(\\d{2})-(\\d{2})&#34;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#39;cmd_stdlib&#39;&gt;smatch&lt;/span&gt;&amp;nbsp;m;&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span class=&#39;cmd_stdlib&#39;&gt;regex_match&lt;/span&gt;(str,&amp;nbsp;m,&amp;nbsp;rx))&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;int&lt;/span&gt;&amp;nbsp;year&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;stoi&lt;/span&gt;(m.&lt;span class=&#39;cmd_stdlib&#39;&gt;str&lt;/span&gt;(&lt;span class=&#39;cmd_number&#39;&gt;1&lt;/span&gt;));&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;int&lt;/span&gt;&amp;nbsp;month&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;stoi&lt;/span&gt;(m.&lt;span class=&#39;cmd_stdlib&#39;&gt;str&lt;/span&gt;(&lt;span class=&#39;cmd_number&#39;&gt;2&lt;/span&gt;));&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;int&lt;/span&gt;&amp;nbsp;day&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;stoi&lt;/span&gt;(m.&lt;span class=&#39;cmd_stdlib&#39;&gt;str&lt;/span&gt;(&lt;span class=&#39;cmd_number&#39;&gt;3&lt;/span&gt;));&lt;br&gt;}
  &lt;/div&gt;
  &lt;div class=&#39;panel-footer&#39;&gt;
    #include &amp;lt;regex&amp;gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;CoffeeScript&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    str&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_string&#39;&gt;&#39;2016-12-05&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;if&lt;/span&gt;&amp;nbsp;/(\d{4})-(\d{2})-(\d{2})/.&lt;span class=&#39;cmd_stdlib&#39;&gt;test&lt;/span&gt;&amp;nbsp;str&lt;br&gt;&amp;nbsp;&amp;nbsp;year&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Number&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;RegExp&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;$1&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;month&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Number&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;RegExp&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;$2&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;day&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Number&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;RegExp&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;$3&lt;/span&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Java&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_stdlib&#39;&gt;String&lt;/span&gt;&amp;nbsp;str&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_string&#39;&gt;&#34;2016-12-05&#34;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#39;cmd_stdlib&#39;&gt;Pattern&lt;/span&gt;&amp;nbsp;rx&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Pattern&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;compile&lt;/span&gt;(&lt;span class=&#39;cmd_string&#39;&gt;&#34;(\\d{4})-(\\d{2})-(\\d{2})&#34;&lt;/span&gt;);&lt;br&gt;&lt;span class=&#39;cmd_stdlib&#39;&gt;Matcher&lt;/span&gt;&amp;nbsp;m&amp;nbsp;=&amp;nbsp;rx.&lt;span class=&#39;cmd_stdlib&#39;&gt;matcher&lt;/span&gt;(str);&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;if&lt;/span&gt;&amp;nbsp;(m.&lt;span class=&#39;cmd_stdlib&#39;&gt;matches&lt;/span&gt;())&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;int&lt;/span&gt;&amp;nbsp;year&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Integer&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;parseInt&lt;/span&gt;(m.&lt;span class=&#39;cmd_stdlib&#39;&gt;group&lt;/span&gt;(&lt;span class=&#39;cmd_number&#39;&gt;1&lt;/span&gt;));&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;int&lt;/span&gt;&amp;nbsp;month&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Integer&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;parseInt&lt;/span&gt;(m.&lt;span class=&#39;cmd_stdlib&#39;&gt;group&lt;/span&gt;(&lt;span class=&#39;cmd_number&#39;&gt;2&lt;/span&gt;));&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;int&lt;/span&gt;&amp;nbsp;day&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Integer&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;parseInt&lt;/span&gt;(m.&lt;span class=&#39;cmd_stdlib&#39;&gt;group&lt;/span&gt;(&lt;span class=&#39;cmd_number&#39;&gt;3&lt;/span&gt;));&lt;br&gt;}
  &lt;/div&gt;
  &lt;div class=&#39;panel-footer&#39;&gt;
    import java.util.regex.Matcher;&lt;br&gt;
import java.util.regex.Pattern;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;JavaScript&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_keyword&#39;&gt;var&lt;/span&gt;&amp;nbsp;str&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_string&#39;&gt;&#39;2016-12-05&#39;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;if&lt;/span&gt;&amp;nbsp;(/(\d{4})-(\d{2})-(\d{2})/.&lt;span class=&#39;cmd_stdlib&#39;&gt;test&lt;/span&gt;(str))&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;var&lt;/span&gt;&amp;nbsp;year&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Number&lt;/span&gt;(&lt;span class=&#39;cmd_stdlib&#39;&gt;RegExp&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;$1&lt;/span&gt;);&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;var&lt;/span&gt;&amp;nbsp;month&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Number&lt;/span&gt;(&lt;span class=&#39;cmd_stdlib&#39;&gt;RegExp&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;$2&lt;/span&gt;);&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;var&lt;/span&gt;&amp;nbsp;day&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Number&lt;/span&gt;(&lt;span class=&#39;cmd_stdlib&#39;&gt;RegExp&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;$3&lt;/span&gt;);&lt;br&gt;}
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Kotlin&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_keyword&#39;&gt;val&lt;/span&gt;&amp;nbsp;str&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_string&#39;&gt;&#34;2016-12-05&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;val&lt;/span&gt;&amp;nbsp;rx&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_string&#39;&gt;&#34;(\\d{4})-(\\d{2})-(\\d{2})&#34;&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;toRegex&lt;/span&gt;()&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;val&lt;/span&gt;&amp;nbsp;m&amp;nbsp;=&amp;nbsp;rx.&lt;span class=&#39;cmd_stdlib&#39;&gt;matchEntire&lt;/span&gt;(str)&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;if&lt;/span&gt;&amp;nbsp;(m!=null)&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;val&lt;/span&gt;&amp;nbsp;year&amp;nbsp;=&amp;nbsp;m.&lt;span class=&#39;cmd_stdlib&#39;&gt;groups&lt;/span&gt;[&lt;span class=&#39;cmd_number&#39;&gt;1&lt;/span&gt;]!!.&lt;span class=&#39;cmd_stdlib&#39;&gt;value&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;toInt&lt;/span&gt;()&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;val&lt;/span&gt;&amp;nbsp;month&amp;nbsp;=&amp;nbsp;m.&lt;span class=&#39;cmd_stdlib&#39;&gt;groups&lt;/span&gt;[&lt;span class=&#39;cmd_number&#39;&gt;2&lt;/span&gt;]!!.&lt;span class=&#39;cmd_stdlib&#39;&gt;value&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;toInt&lt;/span&gt;()&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;val&lt;/span&gt;&amp;nbsp;day&amp;nbsp;=&amp;nbsp;m.&lt;span class=&#39;cmd_stdlib&#39;&gt;groups&lt;/span&gt;[&lt;span class=&#39;cmd_number&#39;&gt;3&lt;/span&gt;]!!.&lt;span class=&#39;cmd_stdlib&#39;&gt;value&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;toInt&lt;/span&gt;()&lt;br&gt;}
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Lua&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    str&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_string&#39;&gt;&#39;2016-12-05&#39;&lt;/span&gt;&lt;br&gt;rx&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_string&#39;&gt;&#39;(%d%d%d%d)-(%d%d)-(%d%d)&#39;&lt;/span&gt;&lt;br&gt;year,&amp;nbsp;month,&amp;nbsp;day&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;string&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;match&lt;/span&gt;(str,&amp;nbsp;rx)&lt;br&gt;year&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;tonumber&lt;/span&gt;(year)&lt;br&gt;month&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;tonumber&lt;/span&gt;(month)&lt;br&gt;day&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;tonumber&lt;/span&gt;(day)
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Objective-C&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_stdlib&#39;&gt;NSString&lt;/span&gt;&amp;nbsp;*str&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_string&#39;&gt;@&#34;2016-12-05&#34;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#39;cmd_stdlib&#39;&gt;NSRegularExpression&lt;/span&gt;&amp;nbsp;*rx&amp;nbsp;=&amp;nbsp;[&lt;span class=&#39;cmd_stdlib&#39;&gt;NSRegularExpression&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;regularExpressionWithPattern&lt;/span&gt;:&lt;span class=&#39;cmd_string&#39;&gt;@&#34;(\\d{4})-(\\d{2})-(\\d{2})&#34;&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;options&lt;/span&gt;:&lt;span class=&#39;cmd_number&#39;&gt;0&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;error&lt;/span&gt;:&lt;span class=&#39;cmd_keyword&#39;&gt;nil&lt;/span&gt;];&lt;br&gt;&lt;span class=&#39;cmd_stdlib&#39;&gt;NSTextCheckingResult&lt;/span&gt;&amp;nbsp;*m&amp;nbsp;=&amp;nbsp;[rx&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;firstMatchInString&lt;/span&gt;:str&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;options&lt;/span&gt;:&lt;span class=&#39;cmd_number&#39;&gt;0&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;range&lt;/span&gt;:&lt;span class=&#39;cmd_stdlib&#39;&gt;NSMakeRange&lt;/span&gt;(&lt;span class=&#39;cmd_number&#39;&gt;0&lt;/span&gt;,&amp;nbsp;[str&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;length&lt;/span&gt;])];&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;if&lt;/span&gt;&amp;nbsp;(m!=&lt;span class=&#39;cmd_keyword&#39;&gt;nil&lt;/span&gt;)&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;NSInteger&lt;/span&gt;&amp;nbsp;year&amp;nbsp;=&amp;nbsp;[[str&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;substringWithRange&lt;/span&gt;:[m&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;rangeAtIndex&lt;/span&gt;:&lt;span class=&#39;cmd_number&#39;&gt;1&lt;/span&gt;]]&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;integerValue&lt;/span&gt;];&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;NSInteger&lt;/span&gt;&amp;nbsp;month&amp;nbsp;=&amp;nbsp;[[str&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;substringWithRange&lt;/span&gt;:[m&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;rangeAtIndex&lt;/span&gt;:&lt;span class=&#39;cmd_number&#39;&gt;2&lt;/span&gt;]]&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;integerValue&lt;/span&gt;];&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;NSInteger&lt;/span&gt;&amp;nbsp;day&amp;nbsp;=&amp;nbsp;[[str&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;substringWithRange&lt;/span&gt;:[m&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;rangeAtIndex&lt;/span&gt;:&lt;span class=&#39;cmd_number&#39;&gt;3&lt;/span&gt;]]&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;integerValue&lt;/span&gt;];&lt;br&gt;}
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Perl&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    $str&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_string&#39;&gt;&#39;2016-12-05&#39;&lt;/span&gt;;&lt;br&gt;$rx&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;qr&lt;/span&gt;/(\d{4})-(\d{2})-(\d{2})/;&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;if&lt;/span&gt;&amp;nbsp;($str&amp;nbsp;=~&amp;nbsp;$rx)&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;($year,&amp;nbsp;$month,&amp;nbsp;$day)&amp;nbsp;=&amp;nbsp;(&lt;span class=&#39;cmd_keyword&#39;&gt;int&lt;/span&gt;&amp;nbsp;$1,&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;int&lt;/span&gt;&amp;nbsp;$2,&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;int&lt;/span&gt;&amp;nbsp;$3);&lt;br&gt;}
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;PHP&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    $str&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_string&#39;&gt;&#39;2016-12-05&#39;&lt;/span&gt;;&lt;br&gt;$rx&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_string&#39;&gt;&#39;/(\d{4})-(\d{2})-(\d{2})/&#39;&lt;/span&gt;;&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;if&lt;/span&gt;&amp;nbsp;(&lt;span class=&#39;cmd_stdlib&#39;&gt;preg_match&lt;/span&gt;($rx,&amp;nbsp;$str,&amp;nbsp;$m))&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;$year&amp;nbsp;=&amp;nbsp;(&lt;span class=&#39;cmd_keyword&#39;&gt;int&lt;/span&gt;)$m[&lt;span class=&#39;cmd_number&#39;&gt;1&lt;/span&gt;];&lt;br&gt;&amp;nbsp;&amp;nbsp;$month&amp;nbsp;=&amp;nbsp;(&lt;span class=&#39;cmd_keyword&#39;&gt;int&lt;/span&gt;)$m[&lt;span class=&#39;cmd_number&#39;&gt;2&lt;/span&gt;];&lt;br&gt;&amp;nbsp;&amp;nbsp;$day&amp;nbsp;=&amp;nbsp;(&lt;span class=&#39;cmd_keyword&#39;&gt;int&lt;/span&gt;)$m[&lt;span class=&#39;cmd_number&#39;&gt;3&lt;/span&gt;];&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_comment&#39;&gt;//&amp;nbsp;if&amp;nbsp;you&amp;nbsp;don&#39;t&amp;nbsp;need&amp;nbsp;integers&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;list&lt;/span&gt;($_,&amp;nbsp;$year,&amp;nbsp;$month,&amp;nbsp;$day)&amp;nbsp;=&amp;nbsp;$m;&lt;br&gt;}
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Python&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    str&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_string&#39;&gt;&#39;2016-12-05&#39;&lt;/span&gt;&lt;br&gt;rx&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_string&#39;&gt;&#39;(\\d{4})-(\\d{2})-(\\d{2})&#39;&lt;/span&gt;&lt;br&gt;m&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;re&lt;/span&gt;.&lt;span class=&#39;cmd_stdlib&#39;&gt;search&lt;/span&gt;(rx,&amp;nbsp;str)&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;if&lt;/span&gt;&amp;nbsp;m:&lt;br&gt;&amp;nbsp;&amp;nbsp;year&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;int&lt;/span&gt;(m.&lt;span class=&#39;cmd_stdlib&#39;&gt;group&lt;/span&gt;(&lt;span class=&#39;cmd_number&#39;&gt;1&lt;/span&gt;))&lt;br&gt;&amp;nbsp;&amp;nbsp;month&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;int&lt;/span&gt;(m.&lt;span class=&#39;cmd_stdlib&#39;&gt;group&lt;/span&gt;(&lt;span class=&#39;cmd_number&#39;&gt;2&lt;/span&gt;))&lt;br&gt;&amp;nbsp;&amp;nbsp;day&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;int&lt;/span&gt;(m.&lt;span class=&#39;cmd_stdlib&#39;&gt;group&lt;/span&gt;(&lt;span class=&#39;cmd_number&#39;&gt;3&lt;/span&gt;))&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_comment&#39;&gt;//&amp;nbsp;if&amp;nbsp;you&amp;nbsp;don&#39;t&amp;nbsp;need&amp;nbsp;integers&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;year,&amp;nbsp;month,&amp;nbsp;day&amp;nbsp;=&amp;nbsp;m.&lt;span class=&#39;cmd_stdlib&#39;&gt;groups&lt;/span&gt;()
  &lt;/div&gt;
  &lt;div class=&#39;panel-footer&#39;&gt;
    import re
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Ruby&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_comment&#39;&gt;//&amp;nbsp;using&amp;nbsp;method&lt;/span&gt;&lt;br&gt;str&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_string&#39;&gt;&#39;2016-12-05&#39;&lt;/span&gt;&lt;br&gt;rx&amp;nbsp;=&amp;nbsp;/(\d{4})-(\d{2})-(\d{2})/&lt;br&gt;m&amp;nbsp;=&amp;nbsp;rx.&lt;span class=&#39;cmd_stdlib&#39;&gt;match&lt;/span&gt;(str)&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;if&lt;/span&gt;&amp;nbsp;m&lt;br&gt;&amp;nbsp;&amp;nbsp;year&amp;nbsp;=&amp;nbsp;m[&lt;span class=&#39;cmd_number&#39;&gt;1&lt;/span&gt;].&lt;span class=&#39;cmd_stdlib&#39;&gt;to_i&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;month&amp;nbsp;=&amp;nbsp;m[&lt;span class=&#39;cmd_number&#39;&gt;2&lt;/span&gt;].&lt;span class=&#39;cmd_stdlib&#39;&gt;to_i&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;day&amp;nbsp;=&amp;nbsp;m[&lt;span class=&#39;cmd_number&#39;&gt;3&lt;/span&gt;].&lt;span class=&#39;cmd_stdlib&#39;&gt;to_i&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_comment&#39;&gt;//&amp;nbsp;if&amp;nbsp;you&amp;nbsp;don&#39;t&amp;nbsp;need&amp;nbsp;integers&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;year,&amp;nbsp;month,&amp;nbsp;day&amp;nbsp;=&amp;nbsp;m[&lt;span class=&#39;cmd_number&#39;&gt;1&lt;/span&gt;..&lt;span class=&#39;cmd_number&#39;&gt;3&lt;/span&gt;]&lt;br&gt;end&lt;br&gt;&lt;span class=&#39;cmd_hr&#39;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#39;cmd_comment&#39;&gt;//&amp;nbsp;using&amp;nbsp;pattern-matching&amp;nbsp;operator&lt;/span&gt;&lt;br&gt;str&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_string&#39;&gt;&#39;2016-12-05&#39;&lt;/span&gt;&lt;br&gt;rx&amp;nbsp;=&amp;nbsp;/(\d{4})-(\d{2})-(\d{2})/&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;if&lt;/span&gt;&amp;nbsp;rx&amp;nbsp;=~&amp;nbsp;str&lt;br&gt;&amp;nbsp;&amp;nbsp;year&amp;nbsp;=&amp;nbsp;$~[&lt;span class=&#39;cmd_number&#39;&gt;1&lt;/span&gt;].&lt;span class=&#39;cmd_stdlib&#39;&gt;to_i&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;month&amp;nbsp;=&amp;nbsp;$~[&lt;span class=&#39;cmd_number&#39;&gt;2&lt;/span&gt;].&lt;span class=&#39;cmd_stdlib&#39;&gt;to_i&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;day&amp;nbsp;=&amp;nbsp;$~[&lt;span class=&#39;cmd_number&#39;&gt;3&lt;/span&gt;].&lt;span class=&#39;cmd_stdlib&#39;&gt;to_i&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_comment&#39;&gt;//&amp;nbsp;if&amp;nbsp;you&amp;nbsp;don&#39;t&amp;nbsp;need&amp;nbsp;integers&lt;/span&gt;&lt;br&gt;&amp;nbsp;&amp;nbsp;year,&amp;nbsp;month,&amp;nbsp;day&amp;nbsp;=&amp;nbsp;$~[&lt;span class=&#39;cmd_number&#39;&gt;1&lt;/span&gt;..&lt;span class=&#39;cmd_number&#39;&gt;3&lt;/span&gt;]&lt;br&gt;end
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#39;panel panel-info&#39;&gt;
  &lt;div class=&#39;panel-heading&#39;&gt;Swift&lt;/div&gt;
  &lt;div class=&#39;panel-body&#39;&gt;
    &lt;span class=&#39;cmd_keyword&#39;&gt;let&lt;/span&gt;&amp;nbsp;str&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_string&#39;&gt;&#34;2016-12-05&#34;&lt;/span&gt;&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;let&lt;/span&gt;&amp;nbsp;rx&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;try!&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;NSRegularExpression&lt;/span&gt;(&lt;span class=&#39;cmd_stdlib&#39;&gt;pattern&lt;/span&gt;:&amp;nbsp;&lt;span class=&#39;cmd_string&#39;&gt;&#34;(\\d{4})-(\\d{2})-(\\d{2})&#34;&lt;/span&gt;,&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;options&lt;/span&gt;:&amp;nbsp;[])&lt;br&gt;&lt;span class=&#39;cmd_keyword&#39;&gt;if&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;let&lt;/span&gt;&amp;nbsp;m&amp;nbsp;=&amp;nbsp;rx.&lt;span class=&#39;cmd_stdlib&#39;&gt;firstMatch&lt;/span&gt;(&lt;span class=&#39;cmd_stdlib&#39;&gt;in&lt;/span&gt;:&amp;nbsp;str,&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;options&lt;/span&gt;:&amp;nbsp;[],&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;range&lt;/span&gt;:&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;NSRange&lt;/span&gt;(&lt;span class=&#39;cmd_stdlib&#39;&gt;location&lt;/span&gt;:&amp;nbsp;&lt;span class=&#39;cmd_number&#39;&gt;0&lt;/span&gt;,&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;length&lt;/span&gt;:&amp;nbsp;(str&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;as&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;NSString&lt;/span&gt;).&lt;span class=&#39;cmd_stdlib&#39;&gt;length&lt;/span&gt;))&amp;nbsp;{&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;let&lt;/span&gt;&amp;nbsp;year&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Int&lt;/span&gt;((str&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;as&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;NSString&lt;/span&gt;).&lt;span class=&#39;cmd_stdlib&#39;&gt;substring&lt;/span&gt;(&lt;span class=&#39;cmd_stdlib&#39;&gt;with&lt;/span&gt;:&amp;nbsp;m.&lt;span class=&#39;cmd_stdlib&#39;&gt;rangeAt&lt;/span&gt;(&lt;span class=&#39;cmd_number&#39;&gt;1&lt;/span&gt;)))&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;let&lt;/span&gt;&amp;nbsp;month&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Int&lt;/span&gt;((str&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;as&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;NSString&lt;/span&gt;).&lt;span class=&#39;cmd_stdlib&#39;&gt;substring&lt;/span&gt;(&lt;span class=&#39;cmd_stdlib&#39;&gt;with&lt;/span&gt;:&amp;nbsp;m.&lt;span class=&#39;cmd_stdlib&#39;&gt;rangeAt&lt;/span&gt;(&lt;span class=&#39;cmd_number&#39;&gt;2&lt;/span&gt;)))&lt;br&gt;&amp;nbsp;&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;let&lt;/span&gt;&amp;nbsp;day&amp;nbsp;=&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;Int&lt;/span&gt;((str&amp;nbsp;&lt;span class=&#39;cmd_keyword&#39;&gt;as&lt;/span&gt;&amp;nbsp;&lt;span class=&#39;cmd_stdlib&#39;&gt;NSString&lt;/span&gt;).&lt;span class=&#39;cmd_stdlib&#39;&gt;substring&lt;/span&gt;(&lt;span class=&#39;cmd_stdlib&#39;&gt;with&lt;/span&gt;:&amp;nbsp;m.&lt;span class=&#39;cmd_stdlib&#39;&gt;rangeAt&lt;/span&gt;(&lt;span class=&#39;cmd_number&#39;&gt;3&lt;/span&gt;)))&lt;br&gt;}
  &lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>