<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Croquis on sixmen.com</title>
    <link>http://sixmen.com/ko/tags/croquis/</link>
    <description>Recent content in Croquis on sixmen.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 11 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://sixmen.com/ko/tags/croquis/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>크로키의 스택 - AWS Batch</title>
      <link>http://sixmen.com/ko/tech/2020-02-11-1-croquis-stack-aws-batch/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2020-02-11-1-croquis-stack-aws-batch/</guid>
      <description>서비스를 운영하다 보면 주기적으로 실행이 필요한 작업이 생깁니다. 이런 작업을 실행하는 방법은 여러 가지가 있을 수 있습니다. 다음은 크로키에서 현재 선택해서 전환</description>
    </item>
    
    <item>
      <title>크로키의 스택 - GraphQL</title>
      <link>http://sixmen.com/ko/tech/2019-05-22-1-croquis-stack-graphql/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2019-05-22-1-croquis-stack-graphql/</guid>
      <description>현재 크로키는 API를 GraphQL로 만들고 있습니다. 아직 많은 부분에 대해서 연구 중이어서 현재 상황만 간단하게 정리해 보겠습니다. Thrift를 1년 정</description>
    </item>
    
    <item>
      <title>크로키의 스택 - Thrift</title>
      <link>http://sixmen.com/ko/tech/2019-04-28-1-croquis-stack-thrift/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2019-04-28-1-croquis-stack-thrift/</guid>
      <description>2016년 중반 마이크로서비스로의 전환을 결정했습니다. 마이크로서비스는 이론상 다른 서비스에 영향을 주지 않고 내부 기술을 바꿀 수 있습니다. 하지만 마이크로</description>
    </item>
    
    <item>
      <title>크로키의 스택 - REST API</title>
      <link>http://sixmen.com/ko/tech/2018-05-30-1-croquis-stack-rest-api/</link>
      <pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2018-05-30-1-croquis-stack-rest-api/</guid>
      <description>크로키가 클라이언트-서버 아키텍처를 가진 첫 번째 서비스 개발을 시작한 것은 2012년이었습니다. 클라이언트에서 서버와 통신할 방법이 필요했는데 당시의 대세</description>
    </item>
    
    <item>
      <title>크로키의 스택 - 마이크로서비스</title>
      <link>http://sixmen.com/ko/tech/2017-10-15-1-croquis-stack-microservice/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-10-15-1-croquis-stack-microservice/</guid>
      <description>지그재그 서비스는 모놀리식 아키텍처(Monolithic Architecture)에서 마이크로서비스 아키텍처(Microservice Arch</description>
    </item>
    
    <item>
      <title>크로키의 스택 - Mithril</title>
      <link>http://sixmen.com/ko/tech/2017-04-07-1-croquis-stack-mithril/</link>
      <pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-04-07-1-croquis-stack-mithril/</guid>
      <description>이번 글에서는 크로키가 사용하는 스택 중 클라이언트 JavaScript 프레임워크(client-side JavaScript framework)에 대해서 소개해볼까 합니다. TD;DR) 크로키에서</description>
    </item>
    
    <item>
      <title>크로키가 Node.js를 선택한 이유</title>
      <link>http://sixmen.com/ko/tech/2017-02-08-1-why-croquis-selects-nodejs/</link>
      <pubDate>Wed, 08 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-02-08-1-why-croquis-selects-nodejs/</guid>
      <description>현재 크로키에서는 서버용 웹 프레임워크로 Node.js 위에서 Express를 사용하고 있습니다. 이번 글에서는 어떤 이유로 Node.js를 사용하게 되었는지 설명하려</description>
    </item>
    
  </channel>
</rss>