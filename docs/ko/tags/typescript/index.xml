<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Typescript on sixmen.com</title>
    <link>http://sixmen.com/ko/tags/typescript/index.xml</link>
    <description>Recent content in Typescript on sixmen.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="http://sixmen.com/ko/tags/typescript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>webpack, TypeScript, Mithril을 사용하는 프로젝트 생성 튜토리얼</title>
      <link>http://sixmen.com/ko/tech/2017-04-11-1-webpack-setup-tutorial-with-typescript-and-mithril/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-04-11-1-webpack-setup-tutorial-with-typescript-and-mithril/</guid>
      <description>

&lt;p&gt;클라이언트 JavaScript 개발 환경은 빠르게 변화하고 있습니다.
다양한 관련 기술 중 빌드 툴 쪽에서 최근 가장 주목 받는 것은 &lt;a href=&#34;https://webpack.js.org/&#34;&gt;webpack&lt;/a&gt;이라고 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;webpack 전체는 굉장히 방대하기 때문에 한번에 이해하기가 쉽지 않습니다.
인터넷에 이미 잘 구성된 설정파일이 많긴 하지만,
기본적인 설정에 대해서 알아두면 많은 도움이 됩니다.&lt;/p&gt;

&lt;p&gt;이번 글에서는 크로키에서 사용하는 &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;,
&lt;a href=&#34;https://mithril.js.org/&#34;&gt;Mithril&lt;/a&gt; 환경에 맞는 webpack 설정을 갖추는 과정을
단계별로 설명합니다.&lt;/p&gt;

&lt;h1 id=&#34;기본이-되는-웹-페이지-생성-3f7ac54-https-github-com-sixmen-mithril-examples-commit-3f7ac5420af5dd705f8f1488b338b77112ae6716&#34;&gt;기본이 되는 웹 페이지 생성 (&lt;a href=&#34;https://github.com/sixmen/mithril-examples/commit/3f7ac5420af5dd705f8f1488b338b77112ae6716&#34;&gt;3f7ac54&lt;/a&gt;)&lt;/h1&gt;

&lt;p&gt;우선 다른 툴/라이브러리/프레임워크를 배제한 기본 파일로 부터 시작합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;app/index.html&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;cp&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;en&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;meta&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;utf-8&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;Sample App&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;title&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;head&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#39;index.js&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;script&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;app/index.js&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;code&gt;app/index.html&lt;/code&gt; 파일을 브라우저로 열면 콘솔에 Hello가 출력됩니다.&lt;/p&gt;

&lt;h1 id=&#34;npm-개발-환경-설정-50fd3c0-https-github-com-sixmen-mithril-examples-commit-50fd3c0cd4f44f22f5f532ad849befef5bfae37f&#34;&gt;npm 개발 환경 설정 (&lt;a href=&#34;https://github.com/sixmen/mithril-examples/commit/50fd3c0cd4f44f22f5f532ad849befef5bfae37f&#34;&gt;50fd3c0&lt;/a&gt;)&lt;/h1&gt;

&lt;p&gt;webpack, Mithril 라이브러리는 npm을 통해 사용하므로 npm 개발환경을 갖춰야 합니다.
&lt;code&gt;package.json&lt;/code&gt; 파일을 생성하고 &lt;code&gt;node_modules&lt;/code&gt; 디렉토리를 Git 무시 목록에 추가합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;package.json&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;setup-from-scratch&amp;quot;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;webpack을-통해-js-번들을-생성하기-8978b0e-https-github-com-sixmen-mithril-examples-commit-8978b0e6032007729b75021074ba2b015934c33b&#34;&gt;webpack을 통해 js 번들을 생성하기 (&lt;a href=&#34;https://github.com/sixmen/mithril-examples/commit/8978b0e6032007729b75021074ba2b015934c33b&#34;&gt;8978b0e&lt;/a&gt;)&lt;/h1&gt;

&lt;p&gt;webpack을 사용하면 원본 js 파일을 잘 묶어서 최종 js 파일을 만들어 내도록 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;우선 webpack을 설치합니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save-dev webpack
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;app/index.js&lt;/code&gt; 파일을 진입점으로 하는 묶음 js 파일 &lt;code&gt;dist/main.js&lt;/code&gt;를 만들어내는 webpack 설정은 다음과 같습니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;webpack.config.js&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;path&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;__dirname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;app&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;entry&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;./index&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;output&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;__dirname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;dist&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;filename&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;[name].js&amp;#39;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;webpack을 실행하면 최종 js 파일이 만들어지는 것을 볼 수 있습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ ./node_modules/.bin/webpack
Hash: d063a108d2635900dd0a
Version: webpack 2.3.3
...

$ ls dist
main.js
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;예제에서는 원본 js 파일이 하나뿐이라 묶으나 안 묶으나 큰 차이가 없지만,
import나 require등의 구문을 사용하면 요구하는 js 파일의 내용이 모두 main.js에 포함되는 것을 확인할 수 있습니다.&lt;/p&gt;

&lt;h1 id=&#34;html-webpack-plugin을-이용해서-html-파일을-생성하기-3b037f7-https-github-com-sixmen-mithril-examples-commit-3b037f7716822f9b8779fab7a4e6375586c72b5d&#34;&gt;html-webpack-plugin을 이용해서 HTML 파일을 생성하기 (&lt;a href=&#34;https://github.com/sixmen/mithril-examples/commit/3b037f7716822f9b8779fab7a4e6375586c72b5d&#34;&gt;3b037f7&lt;/a&gt;)&lt;/h1&gt;

&lt;p&gt;결과물이 동작하려면 HTML 파일도 있어야 합니다. 단순히 &lt;code&gt;app/index.html&lt;/code&gt;을 &lt;code&gt;dist/index.html&lt;/code&gt;로 복사하는 방법도 있지만,
&lt;a href=&#34;https://github.com/jantimon/html-webpack-plugin&#34;&gt;html-webpack-plugin&lt;/a&gt;을 사용하면 HTML 파일을 적절히 생성해 줍니다.&lt;/p&gt;

&lt;p&gt;우선 html-webpack-plugin을 설치합니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save-dev html-webpack-plugin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;webpack.config.js&lt;/code&gt;에 html-webpack-plugin 설정을 추가합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;webpack.config.js&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span&gt;&lt;/span&gt; const path = require(&amp;#39;path&amp;#39;);

&lt;span class=&#34;gi&#34;&gt;+const HtmlWebpackPlugin = require(&amp;#39;html-webpack-plugin&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+&lt;/span&gt;
 module.exports = {
   context: path.resolve(__dirname, &amp;#39;app&amp;#39;),
   entry: &amp;#39;./index&amp;#39;,
   output: {
     path: path.resolve(__dirname, &amp;#39;dist&amp;#39;),
     filename: &amp;#39;[name].js&amp;#39;
&lt;span class=&#34;gd&#34;&gt;-  }&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+  },&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+  plugins: [&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+    new HtmlWebpackPlugin({&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+      template: &amp;#39;index.html&amp;#39;&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+    })&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+  ]&lt;/span&gt;
 };
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;html-webpack-plugin을 사용하면 최종 js 파일이 자동으로 HTML에 추가됩니다. 원본에서 이를 제거합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;app/index.html&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span&gt;&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span class=&#34;gd&#34;&gt;-  &amp;lt;script src=&amp;#39;index.js&amp;#39;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
 &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;다시 webpack을 실행하면 &lt;code&gt;dist/index.html&lt;/code&gt; 파일이 생성된 것을 볼 수 있습니다.
이 파일을 브라우저로 열면 이전과 마찬가지로 콘솔에 Hello가 출력됩니다.&lt;/p&gt;

&lt;h1 id=&#34;webpack-dev-server-사용하기-71e7af3-https-github-com-sixmen-mithril-examples-commit-71e7af35e1e26bfd184655edfbd6365fb2389c91&#34;&gt;webpack-dev-server 사용하기 (&lt;a href=&#34;https://github.com/sixmen/mithril-examples/commit/71e7af35e1e26bfd184655edfbd6365fb2389c91&#34;&gt;71e7af3&lt;/a&gt;)&lt;/h1&gt;

&lt;p&gt;파일을 수정할 때마다 webpack을 실행하는 것을 비효율적입니다. 한번 실행해놓고 파일을 수정하면 자동으로 브라우저에 반영되면 좋을 것 같습니다.
이럴 때 사용하는 것이 &lt;a href=&#34;https://webpack.js.org/configuration/dev-server/&#34;&gt;webpack-dev-server&lt;/a&gt;입니다.&lt;/p&gt;

&lt;p&gt;webpack-dev-server를 설치하고 실행하면 파일을 수정할 때마다 브라우저가 릴로드됩니다.
(--open 옵션을 주면 브라우저가 자동으로 실행됩니다.)&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save-dev webpack-dev-server
$ ./node_modules/.bin/webpack-dev-server --open
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;webpack / webpack-dev-server를 실행할 때 경로를 써주는 것이 귀찮을 경우 &lt;a href=&#34;https://docs.npmjs.com/misc/scripts&#34;&gt;npm 스크립트&lt;/a&gt;를 활용하면 편리합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;package.json&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span&gt;&lt;/span&gt;   &amp;quot;devDependencies&amp;quot;: {
     &amp;quot;html-webpack-plugin&amp;quot;: &amp;quot;^2.28.0&amp;quot;,
     &amp;quot;webpack&amp;quot;: &amp;quot;^2.3.3&amp;quot;,
     &amp;quot;webpack-dev-server&amp;quot;: &amp;quot;^2.4.2&amp;quot;
&lt;span class=&#34;gi&#34;&gt;+  },&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+  &amp;quot;scripts&amp;quot;: {&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+    &amp;quot;build&amp;quot;: &amp;quot;webpack&amp;quot;,&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+    &amp;quot;start&amp;quot;: &amp;quot;webpack-dev-server --open&amp;quot;&lt;/span&gt;
   }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;위와 같이 추가해주면 다음부터는 다음과 같이 실행할 수 있습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ npm start &lt;span class=&#34;c1&#34;&gt;# 개발시&lt;/span&gt;
$ npm run bild &lt;span class=&#34;c1&#34;&gt;# 배포 파일 생성시&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;h1 id=&#34;typescript-설정하기-5bb9d39-https-github-com-sixmen-mithril-examples-commit-5bb9d3901e427b595e2744811cd9103184c510de&#34;&gt;TypeScript 설정하기 (&lt;a href=&#34;https://github.com/sixmen/mithril-examples/commit/5bb9d3901e427b595e2744811cd9103184c510de&#34;&gt;5bb9d39&lt;/a&gt;)&lt;/h1&gt;

&lt;p&gt;TypeScript를 사용하도록 설정하는 것은 &lt;a href=&#34;https://webpack.js.org/guides/webpack-and-typescript/&#34;&gt;webpack &amp;amp; TypeScript&lt;/a&gt; 문서를 참고하면 쉽게 할 수 있습니다.
TypeScript 지원을 위한 loader가 두가지가 있는데 여기서는 &lt;a href=&#34;https://github.com/s-panferov/awesome-typescript-loader&#34;&gt;awesome-typescript-loader&lt;/a&gt;를 사용합니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save-dev typescript awesome-typescript-loader
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;webpack.config.js&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span&gt;&lt;/span&gt;     path: path.resolve(__dirname, &amp;#39;dist&amp;#39;),
     filename: &amp;#39;[name].js&amp;#39;
   },
&lt;span class=&#34;gi&#34;&gt;+  module: {&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+    rules: [&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+      {&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+        test: /\.tsx?$/,&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+        loader: &amp;#39;awesome-typescript-loader&amp;#39;,&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+        exclude: /node_modules/&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+      }&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+    ]&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+  },&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+  resolve: {&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+    extensions: [&amp;#39;.js&amp;#39;, &amp;#39;.ts&amp;#39;, &amp;#39;.tsx&amp;#39;]&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+  },&lt;/span&gt;
   plugins: [
     new HtmlWebpackPlugin({
       template: &amp;#39;index.html&amp;#39;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;원본 js 파일의 확장자를 ts로 변경하고 webpack을 실행하면 awesome-typescript-loader 에 의해서 js로 변경되어 최종 js로 합쳐집니다.&lt;/p&gt;

&lt;h1 id=&#34;mithril-설정하기-d24f1ac-https-github-com-sixmen-mithril-examples-commit-d24f1ac43aed3c0acf7a6e01ae54743e419afada&#34;&gt;Mithril 설정하기 (&lt;a href=&#34;https://github.com/sixmen/mithril-examples/commit/d24f1ac43aed3c0acf7a6e01ae54743e419afada&#34;&gt;d24f1ac&lt;/a&gt;)&lt;/h1&gt;

&lt;p&gt;사전작업이 끝났으니 이제 사용하려는 프레임워크를 추가하고 본격적인 코드를 작성해 보겠습니다.&lt;/p&gt;

&lt;p&gt;최종 결과물에 포함될 프레임워크는 일반 의존 모듈로 추가하고, TypeScript를 위한 타입 정의 파일은 개발 의존 모듈로 추가합니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save mithril
$ npm install --save-dev @types/mithril
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;index.html&lt;/code&gt;에 프레임워크가 렌더링할 타겟을 추가하고, 간단한 Mithril 코드를 작성해봅니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;app/index.html&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span&gt;&lt;/span&gt; &amp;lt;body&amp;gt;
&lt;span class=&#34;gi&#34;&gt;+  &amp;lt;div id=&amp;#39;app&amp;#39;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
 &amp;lt;/body&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;app/index.ts&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;mithril&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;App&lt;/span&gt; &lt;span class=&#34;kr&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ClassComponent&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;view() {&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;div&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;Hello Mithril&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;nx&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;mount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;document&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;app&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;App&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;jsx-설정하기-a106af0-https-github-com-sixmen-mithril-examples-commit-a106af0ff92ed872231705d614289ea1cf65d36d&#34;&gt;JSX 설정하기 (&lt;a href=&#34;https://github.com/sixmen/mithril-examples/commit/a106af0ff92ed872231705d614289ea1cf65d36d&#34;&gt;a106af0&lt;/a&gt;)&lt;/h1&gt;

&lt;p&gt;Mithril도 React에서 나온 JSX 문법을 사용할 수 있습니다. 이를 설정해봅니다.
(저는 JSX를 선호하는데 Mithril 사용자들은 m() 형태를 더 선호하는 것으로 보입니다. &lt;a href=&#34;https://github.com/lhorie/mithril.js/issues/1619&#34;&gt;https://github.com/lhorie/mithril.js/issues/1619&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/jsx.html&#34;&gt;TypeScript의 JSX 지원 기능&lt;/a&gt;을 사용하고, factory 함수를 Mithril에 맞게 설정하면 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;tsconfig.json&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;quot;compilerOptions&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;jsx&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;react&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;quot;jsxFactory&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;m&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;이제 JSX 문법을 사용할 수 있습니다. 다만 확장자를 tsx로 변경해야 합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;app/index.tsx&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span&gt;&lt;/span&gt; class App implements m.ClassComponent&amp;lt;{}&amp;gt; {
     view() {
&lt;span class=&#34;gd&#34;&gt;-        return m(&amp;#39;div&amp;#39;, &amp;#39;Hello Mithril&amp;#39;);&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+        return &amp;lt;div&amp;gt;Hello Mithril with JSX&amp;lt;/div&amp;gt;;&lt;/span&gt;
     }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;css-추가하기-53518ea-https-github-com-sixmen-mithril-examples-commit-53518eac007afdca4dbfadecbea2eea8b18ee8e8&#34;&gt;CSS 추가하기 (&lt;a href=&#34;https://github.com/sixmen/mithril-examples/commit/53518eac007afdca4dbfadecbea2eea8b18ee8e8&#34;&gt;53518ea&lt;/a&gt;)&lt;/h1&gt;

&lt;p&gt;이제 웹 페이지에 스타일을 적용해보겠습니다.
이는 &lt;a href=&#34;https://github.com/webpack-contrib/css-loader&#34;&gt;css-loader&lt;/a&gt;와 &lt;a href=&#34;https://github.com/webpack-contrib/style-loader&#34;&gt;style-loader&lt;/a&gt;를 사용해서 이루어집니다.
모듈을 설치하고 css 파일에 대해서 두 loader를 사용하도록 설정합니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save-dev css-loader style-loader
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;webpack.config.js&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span&gt;&lt;/span&gt;        test: /\.tsx?$/,
         loader: &amp;#39;awesome-typescript-loader&amp;#39;,
         exclude: /node_modules/
&lt;span class=&#34;gi&#34;&gt;+      },&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+      {&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+        test: /\.css$/,&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+        loader: [&amp;#39;style-loader&amp;#39;, &amp;#39;css-loader&amp;#39;]&lt;/span&gt;
       }
     ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;이제 스타일을 추가해봅니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;app/index.css&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nc&#34;&gt;.message&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;font-size&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;20px&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;nb&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;magenta&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;app/index.tsx&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span&gt;&lt;/span&gt; import * as m from &amp;#39;mithril&amp;#39;;

&lt;span class=&#34;gi&#34;&gt;+import &amp;#39;./index.css&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+&lt;/span&gt;
 class App implements m.ClassComponent&amp;lt;{}&amp;gt; {
     view() {
&lt;span class=&#34;gd&#34;&gt;-        return &amp;lt;div&amp;gt;Hello Mithril with JSX&amp;lt;/div&amp;gt;;&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+        return &amp;lt;div class=&amp;#39;message&amp;#39;&amp;gt;Hello Mithril with JSX&amp;lt;/div&amp;gt;;&lt;/span&gt;
     }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;웹 페이지의 텍스트에 크기와 색상이 적용된 것을 볼 수 있습니다.&lt;/p&gt;

&lt;h1 id=&#34;지역-범위의-css-적용하기-6105a82-https-github-com-sixmen-mithril-examples-commit-6105a821f6d05527c8f60964ab86d6fed45e937d&#34;&gt;지역 범위의 CSS 적용하기 (&lt;a href=&#34;https://github.com/sixmen/mithril-examples/commit/6105a821f6d05527c8f60964ab86d6fed45e937d&#34;&gt;6105a82&lt;/a&gt;)&lt;/h1&gt;

&lt;p&gt;컴포넌트별로 나누어서 개발을 하는 경우 CSS도 각 컴포넌트별로 가지는 것이 편리합니다.
이 경우 다른 컴포넌트와 클래스 이름이 겹쳐서 컴포넌트 조합후 전체 스타일이 엉망이 될 가능성이 있습니다.
이를 해결하기 위해서 &lt;a href=&#34;https://en.bem.info/&#34;&gt;BEM&lt;/a&gt;과 같은 네이밍 컨벤션을 사용하기도 하고,
스타일을 HTML 원소 인라인으로 포함시키기도 합니다.&lt;/p&gt;

&lt;p&gt;저는 css-loader의 지역 범위 기능을 선호합니다.
이를 사용하면 같은 클래스 이름을 사용해도 최종 결과물에서는 겹치지 않는 이름으로 변경됩니다.
대신 코드에서 이렇게 임의로 생성한 이름을 CSS 클래스명으로 설정하는 작업이 필요합니다.&lt;/p&gt;

&lt;p&gt;지역 범위를 사용하려면 CSS 파일에 :local을 붙여줍니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;app/index.css&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;gd&#34;&gt;-.message {&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+:local .message {&lt;/span&gt;
   font-size: 20px;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;이렇게 하면 &lt;code&gt;index.css&lt;/code&gt;가 다음과 같은 구조체를 내보냅니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-js&#34; data-lang=&#34;js&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;exports&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;s2&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;Ag7q-vI0hGDj8L_qsNLr7&amp;quot;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;이 구조체를 사용해서 HTML 원소에 적절한 클래스명을 설정해줍니다.
다만 TypeScript가 CSS 파일이 내보내는 구조체를 인식하지 못하기 때문에 타입 정의 파일을 만들어 줘야 컴파일이 됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;app/index.d.ts&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34; data-lang=&#34;typescript&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;kr&#34;&gt;declare&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;module&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;*.css&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;styles&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;key&lt;/span&gt;: &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;kr&#34;&gt;export&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;styles&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;app/index.tsx&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span class=&#34;gi&#34;&gt;+/// &amp;lt;reference path=&amp;#39;index.d.ts&amp;#39;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+&lt;/span&gt;
 import * as m from &amp;#39;mithril&amp;#39;;

&lt;span class=&#34;gd&#34;&gt;-import &amp;#39;./index.css&amp;#39;;&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+import styles = require(&amp;#39;./index.css&amp;#39;);&lt;/span&gt;

 class App implements m.ClassComponent&amp;lt;{}&amp;gt; {
     view() {
&lt;span class=&#34;gd&#34;&gt;-        return &amp;lt;div class=&amp;#39;message&amp;#39;&amp;gt;Hello Mithril with JSX&amp;lt;/div&amp;gt;;&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+        return &amp;lt;div class={styles.message}&amp;gt;Hello Mithril with JSX&amp;lt;/div&amp;gt;;&lt;/span&gt;
     }
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;다만 이렇게 하면 CSS의 클래스명에 대한 검증을 하지 못합니다. (styles.massage로 오타를 내도 알 수 없음)
이에 대한 타입 정의 파일을 만들어 주는 &lt;a href=&#34;https://github.com/Quramy/typed-css-modules&#34;&gt;typed-css-modules&lt;/a&gt; 모듈은 있지만,
webpack과 부드럽게 연동하는 방법은 찾지 못했습니다.&lt;/p&gt;

&lt;h1 id=&#34;스타일을-별도-css-파일로-내보내기-37a2741-https-github-com-sixmen-mithril-examples-commit-37a274103a51309d05cb7dceaf7f99cc6951f57f&#34;&gt;스타일을 별도 CSS 파일로 내보내기 (&lt;a href=&#34;https://github.com/sixmen/mithril-examples/commit/37a274103a51309d05cb7dceaf7f99cc6951f57f&#34;&gt;37a2741&lt;/a&gt;)&lt;/h1&gt;

&lt;p&gt;위와 같이 CSS를 작업한 경우 실행시간에 style 원소로 추가됩니다.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sixmen.com/img/ko/tech/2017-04-11-1-01.jpg&#34; alt=&#34;Runtime DOM&#34; /&gt;&lt;/p&gt;

&lt;p&gt;저는 이것보다는 별도의 CSS 파일로 내보내고 싶었습니다.
이는 &lt;a href=&#34;https://webpack.js.org/guides/code-splitting-css/&#34;&gt;extract-text-webpack-plugin&lt;/a&gt;을 사용해서 할 수 있습니다.
extract-text-webpack-plugin 모듈을 추가하고, 적절한 설정을 해주면 &lt;code&gt;main.css&lt;/code&gt; 파일이 만들어집니다.
이 extract-text-webpack-plugin 사용시 style-loader는 필요하지 않습니다.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span&gt;&lt;/span&gt;$ npm install --save-dev extract-text-webpack-plugin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;em&gt;webpack.config.js&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span&gt;&lt;/span&gt; const path = require(&amp;#39;path&amp;#39;);

&lt;span class=&#34;gi&#34;&gt;+const ExtractTextPlugin = require(&amp;#39;extract-text-webpack-plugin&amp;#39;);&lt;/span&gt;
 const HtmlWebpackPlugin = require(&amp;#39;html-webpack-plugin&amp;#39;);

 module.exports = {
...
       },
       {
         test: /\.css$/,
&lt;span class=&#34;gd&#34;&gt;-        loader: [&amp;#39;style-loader&amp;#39;, &amp;#39;css-loader&amp;#39;]&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+        loader: ExtractTextPlugin.extract(&amp;#39;css-loader&amp;#39;)&lt;/span&gt;
       }
     ]
   },
...
   plugins: [
     new HtmlWebpackPlugin({
       template: &amp;#39;index.html&amp;#39;
&lt;span class=&#34;gi&#34;&gt;+    }),&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+    new ExtractTextPlugin({&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+      filename: &amp;#39;[name].css&amp;#39;&lt;/span&gt;
     })
   ]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;h1 id=&#34;마무리-f596154-https-github-com-sixmen-mithril-examples-commit-f5961546ccdd444da68c8c6bf518948b3527d8c1&#34;&gt;마무리 (&lt;a href=&#34;https://github.com/sixmen/mithril-examples/commit/f5961546ccdd444da68c8c6bf518948b3527d8c1&#34;&gt;f596154&lt;/a&gt;)&lt;/h1&gt;

&lt;p&gt;마지막으로 배포를 위한 코드 최적화 버전을 생성합니다.
webpack은 이를 위한 간단한 옵션을 제공합니다. &lt;code&gt;-p&lt;/code&gt; 만 붙여주면 js 파일과 css 파일이 최소화됩니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;package.json&lt;/em&gt;&lt;/strong&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span&gt;&lt;/span&gt;   &amp;quot;scripts&amp;quot;: {
&lt;span class=&#34;gd&#34;&gt;-    &amp;quot;build&amp;quot;: &amp;quot;webpack&amp;quot;,&lt;/span&gt;
&lt;span class=&#34;gi&#34;&gt;+    &amp;quot;build&amp;quot;: &amp;quot;webpack -p&amp;quot;,&lt;/span&gt;
     &amp;quot;start&amp;quot;: &amp;quot;webpack-dev-server --open&amp;quot;
   }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;p&gt;webpack은 여기서 다루지 못한 많은 기능을 가지고 있습니다. 예를 들어&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://webpack.js.org/guides/caching/&#34;&gt;원할한 캐싱을 위해 내용에 따라 파일명을 다르게 생성하는 기능&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;외부 라이브러리를 vendor.js 등의 파일로 분리&lt;/li&gt;
&lt;li&gt;SASS등의 CSS 전처리기 사용&lt;/li&gt;
&lt;li&gt;이미지, 글꼴 파일 처리&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://webpack.js.org/guides/hmr-react/&#34;&gt;Hot Module Replacement&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;등이 있습니다. 이런 부분들은 차후 기회가 되면 다른 글로 소개하도록 하겠습니다.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>