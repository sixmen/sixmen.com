<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>AWS on sixmen.com</title>
    <link>http://sixmen.com/ko/tags/aws/</link>
    <description>Recent content in AWS on sixmen.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 31 Mar 2022 00:02:00 +0000</lastBuildDate><atom:link href="http://sixmen.com/ko/tags/aws/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Terraform으로 EKS 구축하기</title>
      <link>http://sixmen.com/ko/tech/2022-03-31-3-build-eks-cluster-with-terraform/</link>
      <pubDate>Thu, 31 Mar 2022 00:02:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2022-03-31-3-build-eks-cluster-with-terraform/</guid>
      <description>이전 글에서는 ECS / EKS에서 서비스 하는 것에 대한 개념을 풀어 써봤습니다. 이번 글에서는 잘 만들어진 모듈을 이용해 빠르게 구성해보겠습니다. 모듈을 이용하면 편</description>
    </item>
    
    <item>
      <title>EKS를 사용해서 어플리케이션 서비스 하기</title>
      <link>http://sixmen.com/ko/tech/2022-03-31-2-web-application-using-eks/</link>
      <pubDate>Thu, 31 Mar 2022 00:01:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2022-03-31-2-web-application-using-eks/</guid>
      <description>ECS 아티클에 이어 이번 글에서는 같은 서비스를 EKS로 구축해보도록 하겠습니다. 간단하게 구축하는 것은 eksctl을 쓰면 되지만, 내부 이해를 위해 여기서는 기</description>
    </item>
    
    <item>
      <title>ECS를 사용해서 어플리케이션 서비스 하기</title>
      <link>http://sixmen.com/ko/tech/2022-03-31-1-web-application-using-ecs/</link>
      <pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2022-03-31-1-web-application-using-ecs/</guid>
      <description>카카오스타일에서는 한동한 ECS를 사용해서 어플리케이션을 서비스했습니다. 현재는 EKS로 전환하고 있지만, ECS가 상대적으로 단순하기 때문에 서비스 구</description>
    </item>
    
    <item>
      <title>크로키의 스택 - AWS Batch</title>
      <link>http://sixmen.com/ko/tech/2020-02-11-1-croquis-stack-aws-batch/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2020-02-11-1-croquis-stack-aws-batch/</guid>
      <description>서비스를 운영하다 보면 주기적으로 실행이 필요한 작업이 생깁니다. 이런 작업을 실행하는 방법은 여러 가지가 있을 수 있습니다. 다음은 크로키에서 현재 선택해서 전환</description>
    </item>
    
    <item>
      <title>GitHub 위키 이벤트를 슬랙으로 받기 - 4. GitHub 웹훅 연결하기</title>
      <link>http://sixmen.com/ko/tech/2017-01-06-3-github-wiki-to-slack-setup-github-hook/</link>
      <pubDate>Fri, 06 Jan 2017 03:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-01-06-3-github-wiki-to-slack-setup-github-hook/</guid>
      <description>이제 GitHub 웹훅을 처리할 수 있게 됐습니다. 이전 글에서 생성한 URL을 GitHub에 설정해줍니다. GitHub 저장소의 Settings 탭에 가면 Webhooks 메뉴가 있습니다. 여기서 웹훅을 추가</description>
    </item>
    
    <item>
      <title>GitHub 위키 이벤트를 슬랙으로 받기 - 3. AWS API Gateway 생성하기</title>
      <link>http://sixmen.com/ko/tech/2017-01-06-2-github-wiki-to-slack-aws-api-gateway/</link>
      <pubDate>Fri, 06 Jan 2017 02:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-01-06-2-github-wiki-to-slack-aws-api-gateway/</guid>
      <description>GitHub 이벤트를 받으려면 GitHub에서 접근가능한 URL이 필요합니다. 이전 글에서 만든 Lambda 함수를 외부에서 접근가능하게 하려면 AWS API Gateway를 사용하면</description>
    </item>
    
    <item>
      <title>GitHub 위키 이벤트를 슬랙으로 받기 - 2. AWS KMS를 이용해 키 보호</title>
      <link>http://sixmen.com/ko/tech/2017-01-06-1-github-wiki-to-slack-protect-secret-using-kms/</link>
      <pubDate>Fri, 06 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-01-06-1-github-wiki-to-slack-protect-secret-using-kms/</guid>
      <description>이전 글에서는 AWS Lambda 함수를 생성해서 슬랙에 메시지를 보내는데 성공했습니다. 그런데 이때 사용하는 훅 URL이 그대로 코드에 들어가 있는게 마음에 걸립니다. 이 UR</description>
    </item>
    
    <item>
      <title>GitHub 위키 이벤트를 슬랙으로 받기 - 1. AWS Lambda 설정</title>
      <link>http://sixmen.com/ko/tech/2017-01-05-1-github-wiki-to-slack-setting-aws-lambda/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-01-05-1-github-wiki-to-slack-setting-aws-lambda/</guid>
      <description>크로키닷컴에서는 GitHub 이벤트(이슈 수정, PR등)를 슬랙으로 확인하고 있습니다. 그런데 아쉽게도 기본 GitHub 슬랙 앱은 GitHub 위키 이벤트는 처리하지 못합니다. 그래서 이</description>
    </item>
    
  </channel>
</rss>
