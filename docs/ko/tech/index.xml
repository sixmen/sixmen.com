<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Teches on sixmen.com</title>
    <link>http://sixmen.com/ko/tech/</link>
    <description>Recent content in Teches on sixmen.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 11 Feb 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://sixmen.com/ko/tech/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>크로키의 스택 - AWS Batch</title>
      <link>http://sixmen.com/ko/tech/2020-02-11-1-croquis-stack-aws-batch/</link>
      <pubDate>Tue, 11 Feb 2020 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2020-02-11-1-croquis-stack-aws-batch/</guid>
      <description>서비스를 운영하다 보면 주기적으로 실행이 필요한 작업이 생깁니다. 이런 작업을 실행하는 방법은 여러 가지가 있을 수 있습니다. 다음은 크로키에서 현재 선택해서 전환</description>
    </item>
    
    <item>
      <title>크로키의 스택 - GraphQL</title>
      <link>http://sixmen.com/ko/tech/2019-05-22-1-croquis-stack-graphql/</link>
      <pubDate>Wed, 22 May 2019 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2019-05-22-1-croquis-stack-graphql/</guid>
      <description>현재 크로키는 API를 GraphQL로 만들고 있습니다. 아직 많은 부분에 대해서 연구 중이어서 현재 상황만 간단하게 정리해 보겠습니다. Thrift를 1년 정</description>
    </item>
    
    <item>
      <title>크로키의 스택 - Thrift</title>
      <link>http://sixmen.com/ko/tech/2019-04-28-1-croquis-stack-thrift/</link>
      <pubDate>Sun, 28 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2019-04-28-1-croquis-stack-thrift/</guid>
      <description>2016년 중반 마이크로서비스로의 전환을 결정했습니다. 마이크로서비스는 이론상 다른 서비스에 영향을 주지 않고 내부 기술을 바꿀 수 있습니다. 하지만 마이크로</description>
    </item>
    
    <item>
      <title>BotKit을 이용한 슬랙 봇 만들기</title>
      <link>http://sixmen.com/ko/tech/2019-04-27-1-make-slack-bot-using-botkit/</link>
      <pubDate>Sat, 27 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2019-04-27-1-make-slack-bot-using-botkit/</guid>
      <description>크로키닷컴을 시작하고 비교적 초기부터 ChatOps를 해보고 싶었습니다. GitHub의 글을 보고 도입하고 싶다는 생각이 들었던 거로 기억합니다. 당연하게</description>
    </item>
    
    <item>
      <title>크로키의 스택 - REST API</title>
      <link>http://sixmen.com/ko/tech/2018-05-30-1-croquis-stack-rest-api/</link>
      <pubDate>Wed, 30 May 2018 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2018-05-30-1-croquis-stack-rest-api/</guid>
      <description>크로키가 클라이언트-서버 아키텍처를 가진 첫 번째 서비스 개발을 시작한 것은 2012년이었습니다. 클라이언트에서 서버와 통신할 방법이 필요했는데 당시의 대세</description>
    </item>
    
    <item>
      <title>젠킨스 작업을 정의하는 방식들</title>
      <link>http://sixmen.com/ko/tech/2018-02-27-1-jenkins-job-styles/</link>
      <pubDate>Tue, 27 Feb 2018 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2018-02-27-1-jenkins-job-styles/</guid>
      <description>오늘날의 소프트웨어 개발에 있어서 지속적 통합(continuous integration)은 필수라고 할 수 있습니다. 저도 당연히 동의하면서 오래전부터</description>
    </item>
    
    <item>
      <title>크로키의 스택 - 마이크로서비스</title>
      <link>http://sixmen.com/ko/tech/2017-10-15-1-croquis-stack-microservice/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-10-15-1-croquis-stack-microservice/</guid>
      <description>지그재그 서비스는 모놀리식 아키텍처(Monolithic Architecture)에서 마이크로서비스 아키텍처(Microservice Arch</description>
    </item>
    
    <item>
      <title>webpack, TypeScript, Mithril을 사용하는 프로젝트 생성 튜토리얼</title>
      <link>http://sixmen.com/ko/tech/2017-04-11-1-webpack-setup-tutorial-with-typescript-and-mithril/</link>
      <pubDate>Tue, 11 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-04-11-1-webpack-setup-tutorial-with-typescript-and-mithril/</guid>
      <description>클라이언트 JavaScript 개발 환경은 빠르게 변화하고 있습니다. 다양한 관련 기술 중 빌드 툴 쪽에서 최근 가장 주목 받는 것은 webpack이라고 할 수 있습니다. webpack 전체는 굉장</description>
    </item>
    
    <item>
      <title>크로키의 스택 - Mithril</title>
      <link>http://sixmen.com/ko/tech/2017-04-07-1-croquis-stack-mithril/</link>
      <pubDate>Fri, 07 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-04-07-1-croquis-stack-mithril/</guid>
      <description>이번 글에서는 크로키가 사용하는 스택 중 클라이언트 JavaScript 프레임워크(client-side JavaScript framework)에 대해서 소개해볼까 합니다. TD;DR) 크로키에서</description>
    </item>
    
    <item>
      <title>크로키가 Node.js를 선택한 이유</title>
      <link>http://sixmen.com/ko/tech/2017-02-08-1-why-croquis-selects-nodejs/</link>
      <pubDate>Wed, 08 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-02-08-1-why-croquis-selects-nodejs/</guid>
      <description>현재 크로키에서는 서버용 웹 프레임워크로 Node.js 위에서 Express를 사용하고 있습니다. 이번 글에서는 어떤 이유로 Node.js를 사용하게 되었는지 설명하려</description>
    </item>
    
    <item>
      <title>Node.js로 유닉스 파이프 처리하기</title>
      <link>http://sixmen.com/ko/tech/2017-01-15-1-process-unix-pipe-with-nodejs/</link>
      <pubDate>Sun, 15 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-01-15-1-process-unix-pipe-with-nodejs/</guid>
      <description>크로키에서는 로그를 JSON 문자열로 만들어 일자별(혹은 시간별)로 묶은 후 gzip으로 압축해서 저장하고 있습니다. 그런데 이미 만들어진 로그를 수정해야 하는 일이</description>
    </item>
    
    <item>
      <title>GitHub 위키 이벤트를 슬랙으로 받기 - 4. GitHub 웹훅 연결하기</title>
      <link>http://sixmen.com/ko/tech/2017-01-06-3-github-wiki-to-slack-setup-github-hook/</link>
      <pubDate>Fri, 06 Jan 2017 03:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-01-06-3-github-wiki-to-slack-setup-github-hook/</guid>
      <description>이제 GitHub 웹훅을 처리할 수 있게 됐습니다. 이전 글에서 생성한 URL을 GitHub에 설정해줍니다. GitHub 저장소의 Settings 탭에 가면 Webhooks 메뉴가 있습니다. 여기서 웹훅을 추가</description>
    </item>
    
    <item>
      <title>GitHub 위키 이벤트를 슬랙으로 받기 - 3. AWS API Gateway 생성하기</title>
      <link>http://sixmen.com/ko/tech/2017-01-06-2-github-wiki-to-slack-aws-api-gateway/</link>
      <pubDate>Fri, 06 Jan 2017 02:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-01-06-2-github-wiki-to-slack-aws-api-gateway/</guid>
      <description>GitHub 이벤트를 받으려면 GitHub에서 접근가능한 URL이 필요합니다. 이전 글에서 만든 Lambda 함수를 외부에서 접근가능하게 하려면 AWS API Gateway를 사용하면</description>
    </item>
    
    <item>
      <title>GitHub 위키 이벤트를 슬랙으로 받기 - 2. AWS KMS를 이용해 키 보호</title>
      <link>http://sixmen.com/ko/tech/2017-01-06-1-github-wiki-to-slack-protect-secret-using-kms/</link>
      <pubDate>Fri, 06 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-01-06-1-github-wiki-to-slack-protect-secret-using-kms/</guid>
      <description>이전 글에서는 AWS Lambda 함수를 생성해서 슬랙에 메시지를 보내는데 성공했습니다. 그런데 이때 사용하는 훅 URL이 그대로 코드에 들어가 있는게 마음에 걸립니다. 이 UR</description>
    </item>
    
    <item>
      <title>GitHub 위키 이벤트를 슬랙으로 받기 - 1. AWS Lambda 설정</title>
      <link>http://sixmen.com/ko/tech/2017-01-05-1-github-wiki-to-slack-setting-aws-lambda/</link>
      <pubDate>Thu, 05 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-01-05-1-github-wiki-to-slack-setting-aws-lambda/</guid>
      <description>크로키닷컴에서는 GitHub 이벤트(이슈 수정, PR등)를 슬랙으로 확인하고 있습니다. 그런데 아쉽게도 기본 GitHub 슬랙 앱은 GitHub 위키 이벤트는 처리하지 못합니다. 그래서 이</description>
    </item>
    
    <item>
      <title>언어 비교 - 현재 유닉스 시간</title>
      <link>http://sixmen.com/ko/tech/2017-01-04-1-language-comparison-date-current-unix-time/</link>
      <pubDate>Wed, 04 Jan 2017 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2017-01-04-1-language-comparison-date-current-unix-time/</guid>
      <description>유닉스 시간은 유닉스 Epoch(1970-01-01 00:00:00 +0000 (UTC))로 부터 지난 초 단위 시간을 말합니다. C time_t&amp;nbsp;now&amp;nbsp;=&amp;nbsp;time(NULL); #include &amp;lt;time.h&amp;gt; C++ time_t&amp;nbsp;now&amp;nbsp;=&amp;nbsp;time(nullptr); #include &amp;lt;ctime&amp;gt; CoffeeScript now&amp;nbsp;=&amp;nbsp;Date.now()&amp;nbsp;/&amp;nbsp;1000 now&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date().getTime()&amp;nbsp;/&amp;nbsp;1000 Java long&amp;nbsp;now&amp;nbsp;=&amp;nbsp;System.currentTimeMillis()&amp;nbsp;/&amp;nbsp;1000; long&amp;nbsp;now&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date().getTime()&amp;nbsp;/&amp;nbsp;1000; import java.util.Date; JavaScript now&amp;nbsp;=&amp;nbsp;Date.now()&amp;nbsp;/&amp;nbsp;1000; now&amp;nbsp;=&amp;nbsp;new&amp;nbsp;Date().getTime()&amp;nbsp;/&amp;nbsp;1000; Kotlin val&amp;nbsp;now&amp;nbsp;=&amp;nbsp;System.currentTimeMillis()&amp;nbsp;/&amp;nbsp;1000 val&amp;nbsp;now&amp;nbsp;=&amp;nbsp;Date().getTime()/1000 import java.util.Date Lua now&amp;nbsp;=&amp;nbsp;os.time() Objective-C NSTimeInterval&amp;nbsp;now&amp;nbsp;=&amp;nbsp;[[NSDate&amp;nbsp;date]&amp;nbsp;timeIntervalSince1970]; Perl $now&amp;nbsp;=&amp;nbsp;time; PHP $now&amp;nbsp;=&amp;nbsp;time(); Python time.time() import time</description>
    </item>
    
    <item>
      <title>우부투에 JDK 설치하기</title>
      <link>http://sixmen.com/ko/tech/2016-12-28-1-install-jdk-ubuntu/</link>
      <pubDate>Wed, 28 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-28-1-install-jdk-ubuntu/</guid>
      <description>우분투에는 기본적으로 default-jdk라는 패키지를 제공합니다. 이 패키지를 설치하면 OpenJDK(openjdk-8-jdk)가 설치됩니다</description>
    </item>
    
    <item>
      <title>스크립트 보호 - 모바일에서 AES 해독화 하기</title>
      <link>http://sixmen.com/ko/tech/2016-12-27-1-protect-script-decrypt-aes-mobile/</link>
      <pubDate>Tue, 27 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-27-1-protect-script-decrypt-aes-mobile/</guid>
      <description>이번에는 전편에서 암호화한 파일을 모바일 환경(iOS, 안드로이드)에서 해독화 해보겠습니다. iOS에서 AES 해독화를 하기 위해서는 CommonCrypto 라이브러리를 사용합니</description>
    </item>
    
    <item>
      <title>스크립트 보호 - AES 암호화/해독화 하기</title>
      <link>http://sixmen.com/ko/tech/2016-12-26-1-protect-script-aes-encrypt-decrypt/</link>
      <pubDate>Mon, 26 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-26-1-protect-script-aes-encrypt-decrypt/</guid>
      <description>전편에 이어 실제로 파일을 암호화/해독화 해보겠습니다. OpenSSL 커맨드 라인 도구를 사용하면 프로그램을 따로 작성하지 않아도 암호화를 할 수 있습니다. 우선 원본 파일을</description>
    </item>
    
    <item>
      <title>스크립트 보호 - 암호화 종류</title>
      <link>http://sixmen.com/ko/tech/2016-12-23-1-protect-script-encryption-types/</link>
      <pubDate>Fri, 23 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-23-1-protect-script-encryption-types/</guid>
      <description>한때 하이브리드 앱이 유행했지만 성능문제로 어느 이상을 커지지는 못했습니다. 그러던 와중에 React Native가 나오면서 다시 하나의 코드로 여러 플랫폼을 지원하는</description>
    </item>
    
    <item>
      <title>언어 비교 - 함수 매개 변수에 기본값 지정</title>
      <link>http://sixmen.com/ko/tech/2016-12-19-1-language-comparison-function-default-argument/</link>
      <pubDate>Mon, 19 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-19-1-language-comparison-function-default-argument/</guid>
      <description>C 해당 기능이 존재하지 않음 C++ double&amp;nbsp;logarithm(double&amp;nbsp;x,&amp;nbsp;double&amp;nbsp;base=10)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;return&amp;nbsp;log(x)&amp;nbsp;/&amp;nbsp;log(base); } CoffeeScript logarithm&amp;nbsp;=&amp;nbsp;(x,&amp;nbsp;base=10)&amp;nbsp;-&amp;gt; &amp;nbsp;&amp;nbsp;Math.log(x)&amp;nbsp;/&amp;nbsp;Math.log(base) Java double&amp;nbsp;logarithm(double&amp;nbsp;x)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;return&amp;nbsp;logarithm(x,&amp;nbsp;10); } double&amp;nbsp;logarithm(double&amp;nbsp;x,&amp;nbsp;double&amp;nbsp;base)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;return&amp;nbsp;Math.log(x)&amp;nbsp;/&amp;nbsp;Math.log(base); } use method overloading JavaScript function&amp;nbsp;logarithm(x,&amp;nbsp;base)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;if&amp;nbsp;(base==null)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;base&amp;nbsp;=&amp;nbsp;10; &amp;nbsp;&amp;nbsp;} &amp;nbsp;&amp;nbsp;return&amp;nbsp;Math.log(x)&amp;nbsp;/&amp;nbsp;Math.log(base); } Kotlin fun&amp;nbsp;logarithm(x:&amp;nbsp;Double,&amp;nbsp;base:&amp;nbsp;Double=10.0):&amp;nbsp;Double&amp;nbsp;{ &amp;nbsp;&amp;nbsp;return&amp;nbsp;Math.log(x)&amp;nbsp;/&amp;nbsp;Math.log(base) } Lua function&amp;nbsp;logarithm(x,&amp;nbsp;base) &amp;nbsp;&amp;nbsp;base&amp;nbsp;=&amp;nbsp;base&amp;nbsp;or&amp;nbsp;10 &amp;nbsp;&amp;nbsp;return&amp;nbsp;math.log(x)&amp;nbsp;/&amp;nbsp;math.log(base) end} Objective-C 해당 기능이 존재하지 않음 Perl sub&amp;nbsp;logarithm&amp;nbsp;{ &amp;nbsp;&amp;nbsp;my&amp;nbsp;$x&amp;nbsp;=&amp;nbsp;shift; &amp;nbsp;&amp;nbsp;my&amp;nbsp;$base&amp;nbsp;=&amp;nbsp;shift&amp;nbsp;//&amp;nbsp;10; &amp;nbsp;&amp;nbsp;log($x)&amp;nbsp;/&amp;nbsp;log($base); } PHP function&amp;nbsp;logarithm($x,&amp;nbsp;$base=10)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;return&amp;nbsp;log($x)&amp;nbsp;/&amp;nbsp;log($base); } Python def&amp;nbsp;logarithm(x,&amp;nbsp;base=10): &amp;nbsp;&amp;nbsp;return&amp;nbsp;math.log(x)&amp;nbsp;/&amp;nbsp;math.log(base)</description>
    </item>
    
    <item>
      <title>iOS에서 년도를 구할 때 비정상적인 값이 나오는 문제</title>
      <link>http://sixmen.com/ko/tech/2016-12-16-1-ios-calendar/</link>
      <pubDate>Fri, 16 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-16-1-ios-calendar/</guid>
      <description>지그재그 앱을 사용하는 사용자를 분석할 때 사용하기 위해서 최근 업데이트에 나이를 입력받는 화면이 추가되었습니다. 입력은 나이를 받지만 나이는 매년 달라지기 때문</description>
    </item>
    
    <item>
      <title>문자열이 여러개의 패턴에 일치하는지 여부 검사하기</title>
      <link>http://sixmen.com/ko/tech/2016-12-15-1-match-multiple-patterns/</link>
      <pubDate>Thu, 15 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-15-1-match-multiple-patterns/</guid>
      <description>지그재그에서는 현재 하루에 수천만개의 사용자 로그가 쌓이고 있습니다. 그리고 이 로그를 분석해 사용자가 얼마나 쇼핑몰에 가입을 하는지, 주문을 얼마나 하는지 살피</description>
    </item>
    
    <item>
      <title>언어 비교 - 정규식 캡쳐링 그룹</title>
      <link>http://sixmen.com/ko/tech/2016-12-14-1-language-comparison-regular-expression-capturing-group/</link>
      <pubDate>Wed, 14 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-14-1-language-comparison-regular-expression-capturing-group/</guid>
      <description>C const&amp;nbsp;char&amp;nbsp;*str&amp;nbsp;=&amp;nbsp;&#34;2016-12-05&#34;; regex_t&amp;nbsp;rx; if&amp;nbsp;(regcomp(&amp;amp;rx,&amp;nbsp;&#34;([[:digit:]]{4})-([[:digit:]]{2})-([[:digit:]]{2})&#34;,&amp;nbsp;REG_EXTENDED)==0)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;regmatch_t&amp;nbsp;m[4]; &amp;nbsp;&amp;nbsp;if&amp;nbsp;(regexec(&amp;amp;rx,&amp;nbsp;str,&amp;nbsp;4,&amp;nbsp;m,&amp;nbsp;0)==0)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;year&amp;nbsp;=&amp;nbsp;str2int(str+m[1].rm_so,&amp;nbsp;m[1].rm_eo&amp;nbsp;-&amp;nbsp;m[1].rm_so); &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;month&amp;nbsp;=&amp;nbsp;str2int(str+m[2].rm_so,&amp;nbsp;m[2].rm_eo&amp;nbsp;-&amp;nbsp;m[2].rm_so); &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;int&amp;nbsp;day&amp;nbsp;=&amp;nbsp;str2int(str+m[3].rm_so,&amp;nbsp;m[3].rm_eo&amp;nbsp;-&amp;nbsp;m[3].rm_so); &amp;nbsp;&amp;nbsp;} &amp;nbsp;&amp;nbsp;regfree(&amp;amp;rx); } #include &amp;lt;regex.h&amp;gt; int str2int(const char *str, int len) { int value = 0; char *tmp = strndup(str, len); value = strtol(tmp, (char **)NULL, 10); free(tmp); return value; } C++ string&amp;nbsp;str(&#34;2016-12-05&#34;); regex&amp;nbsp;rx(&#34;(\\d{4})-(\\d{2})-(\\d{2})&#34;); smatch&amp;nbsp;m; if&amp;nbsp;(regex_match(str,&amp;nbsp;m,&amp;nbsp;rx))&amp;nbsp;{ &amp;nbsp;&amp;nbsp;int&amp;nbsp;year&amp;nbsp;=&amp;nbsp;stoi(m.str(1)); &amp;nbsp;&amp;nbsp;int&amp;nbsp;month&amp;nbsp;=&amp;nbsp;stoi(m.str(2)); &amp;nbsp;&amp;nbsp;int&amp;nbsp;day&amp;nbsp;=&amp;nbsp;stoi(m.str(3)); } #include &amp;lt;regex&amp;gt; CoffeeScript str&amp;nbsp;=&amp;nbsp;&#39;2016-12-05&#39; if&amp;nbsp;/(\d{4})-(\d{2})-(\d{2})/.test&amp;nbsp;str &amp;nbsp;&amp;nbsp;year&amp;nbsp;=&amp;nbsp;Number&amp;nbsp;RegExp.$1 &amp;nbsp;&amp;nbsp;month&amp;nbsp;=&amp;nbsp;Number&amp;nbsp;RegExp.$2 &amp;nbsp;&amp;nbsp;day&amp;nbsp;=&amp;nbsp;Number&amp;nbsp;RegExp.$3 Java String&amp;nbsp;str&amp;nbsp;=&amp;nbsp;&#34;2016-12-05&#34;; Pattern&amp;nbsp;rx&amp;nbsp;=&amp;nbsp;Pattern.compile(&#34;(\\d{4})-(\\d{2})-(\\d{2})&#34;); Matcher&amp;nbsp;m&amp;nbsp;=&amp;nbsp;rx.matcher(str); if&amp;nbsp;(m.matches())&amp;nbsp;{ &amp;nbsp;&amp;nbsp;int&amp;nbsp;year&amp;nbsp;=&amp;nbsp;Integer.parseInt(m.group(1)); &amp;nbsp;&amp;nbsp;int&amp;nbsp;month&amp;nbsp;=&amp;nbsp;Integer.parseInt(m.group(2)); &amp;nbsp;&amp;nbsp;int&amp;nbsp;day&amp;nbsp;=&amp;nbsp;Integer.parseInt(m.group(3)); } import java.util.regex.Matcher; import java.util.regex.Pattern;</description>
    </item>
    
    <item>
      <title>언어 비교 - 변수 값 교환</title>
      <link>http://sixmen.com/ko/tech/2016-12-12-1-language-comparison-variable-swap/</link>
      <pubDate>Mon, 12 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-12-1-language-comparison-variable-swap/</guid>
      <description>C //&amp;nbsp;basic tmp&amp;nbsp;=&amp;nbsp;x; x&amp;nbsp;=&amp;nbsp;y; y&amp;nbsp;=&amp;nbsp;tmp; //&amp;nbsp;function void&amp;nbsp;swap(int&amp;nbsp;*a,&amp;nbsp;int&amp;nbsp;*b)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;int&amp;nbsp;tmp; &amp;nbsp;&amp;nbsp;tmp&amp;nbsp;=&amp;nbsp;*b; &amp;nbsp;&amp;nbsp;*b&amp;nbsp;=&amp;nbsp;*a; &amp;nbsp;&amp;nbsp;*a&amp;nbsp;=&amp;nbsp;tmp; } swap(&amp;amp;x,&amp;nbsp;&amp;amp;y); //&amp;nbsp;no&amp;nbsp;temporary&amp;nbsp;variable x&amp;nbsp;=&amp;nbsp;x&amp;nbsp;+&amp;nbsp;y; y&amp;nbsp;=&amp;nbsp;x&amp;nbsp;-&amp;nbsp;y; x&amp;nbsp;=&amp;nbsp;x&amp;nbsp;-&amp;nbsp;y; //&amp;nbsp;no&amp;nbsp;temporary&amp;nbsp;variable&amp;nbsp;2 x&amp;nbsp;=&amp;nbsp;x&amp;nbsp;^&amp;nbsp;y; y&amp;nbsp;=&amp;nbsp;x&amp;nbsp;^&amp;nbsp;y; x&amp;nbsp;=&amp;nbsp;x&amp;nbsp;^&amp;nbsp;y; C++ swap(x,&amp;nbsp;y); #include &amp;lt;algorithm&amp;gt; CoffeeScript [x,&amp;nbsp;y]&amp;nbsp;=&amp;nbsp;[y,&amp;nbsp;x] Java tmp&amp;nbsp;=&amp;nbsp;x; x&amp;nbsp;=&amp;nbsp;y; y&amp;nbsp;=&amp;nbsp;tmp; JavaScript //&amp;nbsp;basic tmp&amp;nbsp;=&amp;nbsp;x; x&amp;nbsp;=&amp;nbsp;y; y&amp;nbsp;=&amp;nbsp;tmp; //&amp;nbsp;tricky&amp;nbsp;one-line x&amp;nbsp;=&amp;nbsp;[y,&amp;nbsp;y&amp;nbsp;=&amp;nbsp;x][0]; //&amp;nbsp;ES2015&amp;nbsp;(ES6) [x,&amp;nbsp;y]&amp;nbsp;=&amp;nbsp;[y,&amp;nbsp;x] Kotlin tmp&amp;nbsp;=&amp;nbsp;x x&amp;nbsp;=&amp;nbsp;y y&amp;nbsp;=&amp;nbsp;tmp Lua x,&amp;nbsp;y&amp;nbsp;=&amp;nbsp;y,&amp;nbsp;x Objective-C tmp&amp;nbsp;=&amp;nbsp;x; x&amp;nbsp;=&amp;nbsp;y; y&amp;nbsp;=&amp;nbsp;tmp; Perl ($x,&amp;nbsp;$y)&amp;nbsp;=&amp;nbsp;($y,&amp;nbsp;$x); PHP //&amp;nbsp;basic list($x,&amp;nbsp;$y)&amp;nbsp;=&amp;nbsp;array($y,&amp;nbsp;$x); //&amp;nbsp;function function&amp;nbsp;swap(&amp;amp;$x,&amp;nbsp;&amp;amp;$y)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;$tmp&amp;nbsp;=&amp;nbsp;$x; &amp;nbsp;&amp;nbsp;$x&amp;nbsp;=&amp;nbsp;$y; &amp;nbsp;&amp;nbsp;$y&amp;nbsp;=&amp;nbsp;$tmp; } Python x,&amp;nbsp;y&amp;nbsp;=&amp;nbsp;y,&amp;nbsp;x Ruby x,&amp;nbsp;y&amp;nbsp;=&amp;nbsp;y,&amp;nbsp;x Swift swap(&amp;amp;x,&amp;nbsp;&amp;amp;y)</description>
    </item>
    
    <item>
      <title>언어 비교 - 문자열 배열 합치기</title>
      <link>http://sixmen.com/ko/tech/2016-12-09-1-language-comparison-string-join/</link>
      <pubDate>Fri, 09 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-09-1-language-comparison-string-join/</guid>
      <description>C const&amp;nbsp;char&amp;nbsp;*const&amp;nbsp;strs[]&amp;nbsp;=&amp;nbsp;{&#34;one&#34;,&amp;nbsp;&#34;two&#34;,&amp;nbsp;&#34;three&#34;}; int&amp;nbsp;i&amp;nbsp;=&amp;nbsp;0; int&amp;nbsp;size&amp;nbsp;=&amp;nbsp;0; char&amp;nbsp;*out; for&amp;nbsp;(i=0;i&amp;lt;3;i++)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;size&amp;nbsp;+=&amp;nbsp;strlen(strs[i])&amp;nbsp;+&amp;nbsp;1; } out&amp;nbsp;=&amp;nbsp;(char&amp;nbsp;*)malloc(size); strcpy(out,&amp;nbsp;strs[0]); for&amp;nbsp;(i=1;i&amp;lt;3;i++)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;strcat(out,&amp;nbsp;&#34;,&#34;); &amp;nbsp;&amp;nbsp;strcat(out,&amp;nbsp;strs[i]); } C++ //&amp;nbsp;one-liner vector&amp;lt;string&amp;gt;&amp;nbsp;strs&amp;nbsp;=&amp;nbsp;{&#34;one&#34;,&amp;nbsp;&#34;two&#34;,&amp;nbsp;&#34;three&#34;}; string&amp;nbsp;out&amp;nbsp;=&amp;nbsp;accumulate(next(strs.begin()),&amp;nbsp;strs.end(),&amp;nbsp;strs[0], &amp;nbsp;&amp;nbsp;[](const&amp;nbsp;string&amp;nbsp;&amp;amp;a,&amp;nbsp;const&amp;nbsp;string&amp;nbsp;&amp;amp;b)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;return&amp;nbsp;a&amp;nbsp;+&amp;nbsp;&#34;,&#34;&amp;nbsp;+&amp;nbsp;b; &amp;nbsp;&amp;nbsp;}); //&amp;nbsp;prevent&amp;nbsp;reallocation vector&amp;lt;string&amp;gt;&amp;nbsp;strs&amp;nbsp;=&amp;nbsp;{&#34;one&#34;,&amp;nbsp;&#34;two&#34;,&amp;nbsp;&#34;three&#34;}; ostringstream&amp;nbsp;os; copy(strs.begin(),&amp;nbsp;strs.end()-1,&amp;nbsp;ostream_iterator&amp;lt;string&amp;gt;(os,&amp;nbsp;&#34;,&#34;)); os&amp;nbsp;&amp;lt;&amp;lt;&amp;nbsp;*strs.rbegin(); string&amp;nbsp;out&amp;nbsp;=&amp;nbsp;os.str(); #include &amp;lt;algorithm&amp;gt; // copy #include &amp;lt;iterator&amp;gt; // next, ostream_iterator #include &amp;lt;numeric&amp;gt; // accumulate #include &amp;lt;sstream&amp;gt; // ostringstream CoffeeScript strs&amp;nbsp;=&amp;nbsp;[&#39;one&#39;,&#39;two&#39;,&#39;three&#39;] out&amp;nbsp;=&amp;nbsp;strs.join&amp;nbsp;&#39;,&#39; Java //&amp;nbsp;Java&amp;nbsp;8 List&amp;lt;String&amp;gt;&amp;nbsp;strs&amp;nbsp;=&amp;nbsp;Arrays.asList(&#34;one&#34;,&amp;nbsp;&#34;two&#34;,&amp;nbsp;&#34;three&#34;); String&amp;nbsp;out&amp;nbsp;=&amp;nbsp;String.join(&#34;,&#34;,&amp;nbsp;strs); //&amp;nbsp;Java&amp;nbsp;7&amp;nbsp;and&amp;nbsp;below String[]&amp;nbsp;strs&amp;nbsp;=&amp;nbsp;{&#34;one&#34;,&amp;nbsp;&#34;two&#34;,&amp;nbsp;&#34;three&#34;}; StringBuilder&amp;nbsp;sb&amp;nbsp;=&amp;nbsp;new&amp;nbsp;StringBuilder(); boolean&amp;nbsp;first&amp;nbsp;=&amp;nbsp;true; for&amp;nbsp;(String&amp;nbsp;str&amp;nbsp;:&amp;nbsp;strs)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;if&amp;nbsp;(first)&amp;nbsp;{ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;first&amp;nbsp;=&amp;nbsp;false; &amp;nbsp;&amp;nbsp;}&amp;nbsp;else&amp;nbsp;{ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;sb.append(&#34;,&#34;); &amp;nbsp;&amp;nbsp;} &amp;nbsp;&amp;nbsp;sb.append(str); } String&amp;nbsp;out&amp;nbsp;=&amp;nbsp;sb.toString(); JavaScript let&amp;nbsp;strs&amp;nbsp;=&amp;nbsp;[&#39;one&#39;,&#39;two&#39;,&#39;three&#39;] let&amp;nbsp;out&amp;nbsp;=&amp;nbsp;strs.join(&#39;,&#39;) Kotlin val&amp;nbsp;strs&amp;nbsp;=&amp;nbsp;arrayOf(&#34;one&#34;,&amp;nbsp;&#34;two&#34;,&amp;nbsp;&#34;three&#34;) val&amp;nbsp;out&amp;nbsp;=&amp;nbsp;strs.joinToString(&#34;,&#34;)</description>
    </item>
    
    <item>
      <title>언어 비교 - 문자열 연결</title>
      <link>http://sixmen.com/ko/tech/2016-12-07-1-language-comparison-string-concatenate/</link>
      <pubDate>Wed, 07 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2016-12-07-1-language-comparison-string-concatenate/</guid>
      <description>C const&amp;nbsp;char&amp;nbsp;*s1&amp;nbsp;=&amp;nbsp;&#34;hello&#34;; const&amp;nbsp;char&amp;nbsp;*s2&amp;nbsp;=&amp;nbsp;&#34;&amp;nbsp;world&#34;; char&amp;nbsp;*s3&amp;nbsp;=&amp;nbsp;(char&amp;nbsp;*)malloc(strlen(s1)+strlen(s2)+1); strcpy(s3,&amp;nbsp;s1); strcat(s3,&amp;nbsp;s2); C++ //&amp;nbsp;destructive string&amp;nbsp;s1&amp;nbsp;=&amp;nbsp;&#34;hello&#34;; s1&amp;nbsp;+=&amp;nbsp;&#34;&amp;nbsp;world&#34;; //&amp;nbsp;non-destructive string&amp;nbsp;s1&amp;nbsp;=&amp;nbsp;&#34;hello&#34;; string&amp;nbsp;s2&amp;nbsp;=&amp;nbsp;s1&amp;nbsp;+&amp;nbsp;&#34;&amp;nbsp;world&#34;; CoffeeScript &#39;hello&#39;&amp;nbsp;+&amp;nbsp;&#39;&amp;nbsp;world&#39; Java &#34;hello&#34;&amp;nbsp;+&amp;nbsp;&#34;&amp;nbsp;world&#34; JavaScript &#39;hello&#39;&amp;nbsp;+&amp;nbsp;&#39;&amp;nbsp;world&#39; Kotlin &#34;hello&#34;&amp;nbsp;+&amp;nbsp;&#34;&amp;nbsp;world&#34; Lua &#39;hello&#39;&amp;nbsp;..&amp;nbsp;&#39;&amp;nbsp;world&#39; Objective-C //&amp;nbsp;destructive NSMutableString&amp;nbsp;*s1&amp;nbsp;=&amp;nbsp;[@&#34;hello&#34;&amp;nbsp;mutableCopy]; [s1&amp;nbsp;appendString:@&#34;&amp;nbsp;world&#34;]; //&amp;nbsp;non-destructive NSString&amp;nbsp;*s1&amp;nbsp;=&amp;nbsp;@&#34;hello&#34;; NSString&amp;nbsp;*s2&amp;nbsp;=&amp;nbsp;[s1&amp;nbsp;stringByAppendingString:@&#34;&amp;nbsp;world&#34;]; Perl &#39;hello&#39;&amp;nbsp;.&amp;nbsp;&#39;&amp;nbsp;world&#39; PHP &#39;hello&#39;&amp;nbsp;.&amp;nbsp;&#39;&amp;nbsp;world&#39; Python &#39;hello&#39;&amp;nbsp;+&amp;nbsp;&#39;&amp;nbsp;world&#39; Ruby &#39;hello&#39;&amp;nbsp;+&amp;nbsp;&#39;&amp;nbsp;world&#39; Swift &#34;hello&#34;&amp;nbsp;+&amp;nbsp;&#34;&amp;nbsp;world&#34;</description>
    </item>
    
    <item>
      <title>iPhone PPI와 논리 픽셀에 대응하는 물리 크기</title>
      <link>http://sixmen.com/ko/tech/2014-12-23-1-iphone-ppi/</link>
      <pubDate>Tue, 23 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2014-12-23-1-iphone-ppi/</guid>
      <description>앱을 iPhone 6 / 6 Plus에 맞추는 작업을 하던 중에 PPI에 혼란이 와서 직접 계산해 봤습니다. 우선 오리지널 iPhone의 물리적 스크린 크기는 가로 1.94 인치(4.</description>
    </item>
    
    <item>
      <title>Git에서 변경된 내용 무시하기</title>
      <link>http://sixmen.com/ko/tech/2014-11-12-1-git-ignore-changes/</link>
      <pubDate>Wed, 12 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2014-11-12-1-git-ignore-changes/</guid>
      <description>개발을 하다보면 몇몇 설정 파일을 수정한 채로 개발을 하는 경우가 있습니다. 예를 들면 서버 주소를 개발용 서버로 변경해서 작업을 할 수 있겠죠. 만약 개발용 서버가 명확</description>
    </item>
    
    <item>
      <title>쉘에서 Nginx(Apache) 로그를 시간별로 분리하기</title>
      <link>http://sixmen.com/ko/tech/2014-09-25-1-split-nginx-log/</link>
      <pubDate>Thu, 25 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2014-09-25-1-split-nginx-log/</guid>
      <description>Nginx 로그 분석을 위해 시간별로 나누고 싶었습니다. 스크립트를 짜도 오래 걸리는 일은 아니겠지만, 쉘에서 하는 방법을 한번 찾아봤습니다. Nginx 로그는 다음과 같은 형태를</description>
    </item>
    
    <item>
      <title>서버 어플리케이션에 logrotate를 적용하기</title>
      <link>http://sixmen.com/ko/tech/2014-04-18-1-logrotate/</link>
      <pubDate>Fri, 18 Apr 2014 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2014-04-18-1-logrotate/</guid>
      <description>요약: logrotate를 통해 로그를 분할하기 위해서는, 서버 어플리케이션이 적당한 시그널(주로 SIGUSR1을 사용. Node.js에서는 디버그 모</description>
    </item>
    
    <item>
      <title>암호 없이 SSH 접속하기</title>
      <link>http://sixmen.com/ko/tech/2012-06-18-1-ssh-without-password/</link>
      <pubDate>Mon, 18 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://sixmen.com/ko/tech/2012-06-18-1-ssh-without-password/</guid>
      <description>이번 글에서는 SSH 서버에 암호 입력 없이 접속하는 방법에 대해서 설명하겠습니다. 정확히 얘기하자면 암호 대신 열쇠를 이용해서 접속하는 방법이 되겠습니다. 암호를 입</description>
    </item>
    
  </channel>
</rss>